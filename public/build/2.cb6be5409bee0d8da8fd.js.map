{"version":3,"file":"2.cb6be5409bee0d8da8fd.js","sources":["webpack://///////////////////////////////////////./public/app/features/profile/ChangePasswordForm.tsx","webpack://///////////////////////////////////////./public/app/features/profile/ChangePasswordPage.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport config from 'app/core/config';\nimport { Button, LinkButton, Form, Field, Input, HorizontalGroup } from '@grafana/ui';\nimport { ChangePasswordFields } from 'app/core/utils/UserProvider';\nimport { css } from 'emotion';\n\nexport interface Props {\n  isSaving: boolean;\n  onChangePassword: (payload: ChangePasswordFields) => void;\n}\n\nexport const ChangePasswordForm: FC<Props> = ({ onChangePassword, isSaving }) => {\n  const { ldapEnabled, authProxyEnabled } = config;\n\n  if (ldapEnabled || authProxyEnabled) {\n    return <p>You cannot change password when ldap or auth proxy authentication is enabled.</p>;\n  }\n  return (\n    <div\n      className={css`\n        max-width: 400px;\n      `}\n    >\n      <Form onSubmit={onChangePassword}>\n        {({ register, errors, getValues }) => {\n          return (\n            <>\n              <Field label=\"Old password\" invalid={!!errors.oldPassword} error={errors?.oldPassword?.message}>\n                <Input type=\"password\" name=\"oldPassword\" ref={register({ required: 'Old password is required' })} />\n              </Field>\n\n              <Field label=\"New password\" invalid={!!errors.newPassword} error={errors?.newPassword?.message}>\n                <Input\n                  type=\"password\"\n                  name=\"newPassword\"\n                  ref={register({\n                    required: 'New password is required',\n                    validate: {\n                      confirm: v => v === getValues().confirmNew || 'Passwords must match',\n                      old: v => v !== getValues().oldPassword || `New password can't be the same as the old one.`,\n                    },\n                  })}\n                />\n              </Field>\n\n              <Field label=\"Confirm password\" invalid={!!errors.confirmNew} error={errors?.confirmNew?.message}>\n                <Input\n                  type=\"password\"\n                  name=\"confirmNew\"\n                  ref={register({\n                    required: 'New password confirmation is required',\n                    validate: v => v === getValues().newPassword || 'Passwords must match',\n                  })}\n                />\n              </Field>\n              <HorizontalGroup>\n                <Button variant=\"primary\" disabled={isSaving}>\n                  Change Password\n                </Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/profile`}>\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      </Form>\n    </div>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { StoreState } from 'app/types';\nimport { NavModel } from '@grafana/data';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { UserProvider } from 'app/core/utils/UserProvider';\nimport Page from 'app/core/components/Page/Page';\nimport { ChangePasswordForm } from './ChangePasswordForm';\n\nexport interface Props {\n  navModel: NavModel;\n}\n\nexport class ChangePasswordPage extends PureComponent<Props> {\n  render() {\n    const { navModel } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <UserProvider>\n          {({ changePassword }, states) => (\n            <Page.Contents>\n              <h3 className=\"page-sub-heading\">Change Your Password</h3>\n              <ChangePasswordForm onChangePassword={changePassword} isSaving={states.changePassword} />\n            </Page.Contents>\n          )}\n        </UserProvider>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, `change-password`),\n  };\n}\n\nconst mapDispatchToProps = {};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(ChangePasswordPage));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AADA;AAKA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAFA;AAHA;AAaA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAHA;AAUA;AAAA;AAAA;AAGA;AAAA;AAAA;AAMA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAHA;AASA;AAfA;AACA;AADA;AAAA;AACA;AAiBA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;;;;;A","sourceRoot":""}
{"version":3,"file":"SignupInvited.bfc42b2e1f57635b306d.js","sources":["webpack:////////////////////////////////////./public/app/features/users/SignupInvited.tsx"],"sourcesContent":["import React, { FC, useState } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { StoreState } from 'app/types';\nimport { updateLocation } from 'app/core/actions';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Button, Field, Form, Input } from '@grafana/ui';\nimport { useAsync } from 'react-use';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { getConfig } from 'app/core/config';\nimport { UrlQueryValue } from '@grafana/data';\n\ninterface ConnectedProps {\n  code?: UrlQueryValue;\n}\n\ninterface DispatchProps {\n  updateLocation: typeof updateLocation;\n}\n\ninterface FormModel {\n  email: string;\n  name?: string;\n  username: string;\n  password?: string;\n}\n\nconst navModel = {\n  main: {\n    icon: 'grafana',\n    text: 'Invite',\n    subTitle: 'Register your Grafana account',\n    breadcrumbs: [{ title: 'Login', url: 'login' }],\n  },\n  node: {\n    text: '',\n  },\n};\n\nconst SingupInvitedPageUnconnected: FC<DispatchProps & ConnectedProps> = ({ code }) => {\n  const [initFormModel, setInitFormModel] = useState<FormModel>();\n  const [greeting, setGreeting] = useState<string>();\n  const [invitedBy, setInvitedBy] = useState<string>();\n  useAsync(async () => {\n    const invite = await getBackendSrv().get('/api/user/invite/' + code);\n    setInitFormModel({\n      email: invite.email,\n      name: invite.name,\n      username: invite.email,\n    });\n\n    setGreeting(invite.name || invite.email || invite.username);\n    setInvitedBy(invite.invitedBy);\n  }, []);\n\n  const onSubmit = async (formData: FormModel) => {\n    await getBackendSrv().post('/api/user/invite/complete', { ...formData, inviteCode: code });\n    window.location.href = getConfig().appSubUrl + '/';\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h3 className=\"page-sub-heading\">Hello {greeting || 'there'}.</h3>\n\n        <div className=\"modal-tagline p-b-2\">\n          <em>{invitedBy || 'Someone'}</em> has invited you to join Grafana and the organization{' '}\n          <span className=\"highlight-word\">{contextSrv.user.orgName}</span>\n          <br />\n          Please complete the following and choose a password to accept your invitation and continue:\n        </div>\n        <Form defaultValues={initFormModel} onSubmit={onSubmit}>\n          {({ register, errors }) => (\n            <>\n              <Field invalid={!!errors.email} error={!!errors.email && errors.email.message} label=\"Email\">\n                <Input\n                  placeholder=\"email@example.com\"\n                  name=\"email\"\n                  ref={register({\n                    required: 'Email is required',\n                    pattern: {\n                      value: /^\\S+@\\S+$/,\n                      message: 'Email is invalid',\n                    },\n                  })}\n                />\n              </Field>\n              <Field invalid={!!errors.name} error={!!errors.name && errors.name.message} label=\"Name\">\n                <Input placeholder=\"Name (optional)\" name=\"name\" ref={register} />\n              </Field>\n              <Field invalid={!!errors.username} error={!!errors.username && errors.username.message} label=\"Username\">\n                <Input placeholder=\"Username\" name=\"username\" ref={register({ required: 'Username is required' })} />\n              </Field>\n              <Field invalid={!!errors.password} error={!!errors.password && errors.password.message} label=\"Password\">\n                <Input\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  name=\"password\"\n                  ref={register({ required: 'Password is required' })}\n                />\n              </Field>\n\n              <Button type=\"submit\">Sign Up</Button>\n            </>\n          )}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  code: state.location.routeParams.code,\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, {}> = {\n  updateLocation,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(SingupInvitedPageUnconnected));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAJA;AAMA;AACA;AADA;AAPA;AACA;AAWA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAEA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAHA;AAYA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAQA;AAAA;AA9BA;AAqCA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AACA;AADA;AAIA;;;;;A","sourceRoot":""}
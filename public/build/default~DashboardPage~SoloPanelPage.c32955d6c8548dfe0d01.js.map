{"version":3,"file":"default~DashboardPage~SoloPanelPage.c32955d6c8548dfe0d01.js","sources":["webpack:////////////////////////////./public/app/features/dashboard/components/Inspector/InspectDataTab.tsx","webpack:////////////////////////////./public/app/features/dashboard/components/Inspector/InspectJSONTab.tsx","webpack:////////////////////////////./public/app/features/dashboard/components/Inspector/InspectSubtitle.tsx","webpack:////////////////////////////./public/app/features/dashboard/components/Inspector/PanelInspector.tsx","webpack:////////////////////////////./public/app/features/dashboard/components/Inspector/QueryInspector.tsx","webpack:////////////////////////////./public/app/features/dashboard/components/Inspector/styles.ts","webpack:////////////////////////////./public/app/features/dashboard/components/PanelEditor/utils.ts","webpack:////////////////////////////./public/app/features/dashboard/dashgrid/DashboardPanel.tsx","webpack:////////////////////////////./public/app/features/dashboard/dashgrid/PanelChrome.tsx","webpack:////////////////////////////./public/app/features/dashboard/dashgrid/PanelChromeAngular.tsx","webpack:////////////////////////////./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeader.tsx","webpack:////////////////////////////./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderCorner.tsx","webpack:////////////////////////////./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenu.tsx","webpack:////////////////////////////./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuItem.tsx","webpack:////////////////////////////./public/app/features/dashboard/state/initDashboard.ts","webpack:////////////////////////////./public/app/features/dashboard/utils/getPanelMenu.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  applyFieldOverrides,\n  DataFrame,\n  DataTransformerID,\n  dateTimeFormat,\n  getFrameDisplayName,\n  SelectableValue,\n  toCSV,\n  transformDataFrame,\n} from '@grafana/data';\nimport { Button, Field, Icon, LegacyForms, Select, Table } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { getPanelInspectorStyles } from './styles';\nimport { config } from 'app/core/config';\nimport { saveAs } from 'file-saver';\nimport { css, cx } from 'emotion';\nimport { GetDataOptions } from '../../state/PanelQueryRunner';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\n\nconst { Switch } = LegacyForms;\n\ninterface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n  data: DataFrame[];\n  isLoading: boolean;\n  options: GetDataOptions;\n  onOptionsChange: (options: GetDataOptions) => void;\n}\n\ninterface State {\n  transformId: DataTransformerID;\n  dataFrameIndex: number;\n  transformationOptions: Array<SelectableValue<string>>;\n}\n\nexport class InspectDataTab extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      dataFrameIndex: 0,\n      transformId: DataTransformerID.noop,\n      transformationOptions: buildTransformationOptions(),\n    };\n  }\n\n  exportCsv = (dataFrame: DataFrame) => {\n    const { panel } = this.props;\n    const { transformId } = this.state;\n    const dataFrameCsv = toCSV([dataFrame]);\n\n    const blob = new Blob([dataFrameCsv], {\n      type: 'application/csv;charset=utf-8',\n    });\n    const transformation = transformId !== DataTransformerID.noop ? '-as-' + transformId.toLocaleLowerCase() : '';\n    const fileName = `${panel.title}-data${transformation}-${dateTimeFormat(new Date())}.csv`;\n    saveAs(blob, fileName);\n  };\n\n  onSelectedFrameChanged = (item: SelectableValue<number>) => {\n    this.setState({ dataFrameIndex: item.value || 0 });\n  };\n\n  onTransformationChange = (value: SelectableValue<DataTransformerID>) => {\n    this.setState({ transformId: value.value, dataFrameIndex: 0 });\n    this.props.onOptionsChange({\n      ...this.props.options,\n      withTransforms: false,\n    });\n  };\n\n  getTransformedData(): DataFrame[] {\n    const { transformId, transformationOptions } = this.state;\n    const { data } = this.props;\n\n    if (!data) {\n      return [];\n    }\n\n    const currentTransform = transformationOptions.find(item => item.value === transformId);\n\n    if (currentTransform && currentTransform.transformer.id !== DataTransformerID.noop) {\n      return transformDataFrame([currentTransform.transformer], data);\n    }\n    return data;\n  }\n\n  getProcessedData(): DataFrame[] {\n    const { options } = this.props;\n    let data = this.props.data;\n\n    if (this.state.transformId !== DataTransformerID.noop) {\n      data = this.getTransformedData();\n    }\n\n    // We need to apply field config even though it was already applied in the PanelQueryRunner.\n    // That's because transformers create new fields and data frames, so i.e. display processor is no longer there\n    return applyFieldOverrides({\n      data,\n      theme: config.theme,\n      fieldConfig: options.withFieldConfig ? this.props.panel.fieldConfig : { defaults: {}, overrides: [] },\n      replaceVariables: (value: string) => {\n        return value;\n      },\n    });\n  }\n\n  renderDataOptions = () => {\n    const { options, onOptionsChange, panel } = this.props;\n    const { transformId } = this.state;\n    const styles = getPanelInspectorStyles();\n\n    const panelTransformations = panel.getTransformations();\n    const showPanelTransformationsOption =\n      panelTransformations && panelTransformations.length > 0 && (transformId as any) !== 'join by time';\n    const showFieldConfigsOption = !panel.plugin?.fieldConfigRegistry.isEmpty();\n    const showDataOptions = showPanelTransformationsOption || showFieldConfigsOption;\n\n    if (!showDataOptions) {\n      return null;\n    }\n\n    return (\n      <div className={cx(styles.options, styles.dataDisplayOptions)}>\n        <QueryOperationRow title={'Data display options'} isOpen={false}>\n          {showPanelTransformationsOption && (\n            <div className=\"gf-form-inline\">\n              <Switch\n                tooltip=\"Data shown in the table will be transformed using transformations defined in the panel\"\n                label=\"Apply panel transformations\"\n                labelClass=\"width-12\"\n                checked={!!options.withTransforms}\n                onChange={() => onOptionsChange({ ...options, withTransforms: !options.withTransforms })}\n              />\n            </div>\n          )}\n          {showFieldConfigsOption && (\n            <div className=\"gf-form-inline\">\n              <Switch\n                tooltip=\"Data shown in the table will have panel field configuration applied, for example units or display name\"\n                label=\"Apply field configuration\"\n                labelClass=\"width-12\"\n                checked={!!options.withFieldConfig}\n                onChange={() => onOptionsChange({ ...options, withFieldConfig: !options.withFieldConfig })}\n              />\n            </div>\n          )}\n        </QueryOperationRow>\n      </div>\n    );\n  };\n\n  render() {\n    const { isLoading, data } = this.props;\n    const { dataFrameIndex, transformId, transformationOptions } = this.state;\n    const styles = getPanelInspectorStyles();\n\n    if (isLoading) {\n      return (\n        <div>\n          Loading <Icon name=\"fa fa-spinner\" className=\"fa-spin\" size=\"lg\" />\n        </div>\n      );\n    }\n\n    const dataFrames = this.getProcessedData();\n\n    if (!dataFrames || !dataFrames.length) {\n      return <div>No Data</div>;\n    }\n\n    const choices = dataFrames.map((frame, index) => {\n      return {\n        value: index,\n        label: `${getFrameDisplayName(frame)} (${index})`,\n      };\n    });\n\n    return (\n      <div className={styles.dataTabContent} aria-label={selectors.components.PanelInspector.Data.content}>\n        <div className={styles.actionsWrapper}>\n          <div className={styles.leftActions}>\n            <div className={styles.selects}>\n              {data.length > 1 && (\n                <Field\n                  label=\"Transformer\"\n                  className={css`\n                    margin-bottom: 0;\n                  `}\n                >\n                  <Select\n                    options={transformationOptions}\n                    value={transformId}\n                    onChange={this.onTransformationChange}\n                    width={15}\n                  />\n                </Field>\n              )}\n              {choices.length > 1 && (\n                <Field\n                  label=\"Select result\"\n                  className={css`\n                    margin-bottom: 0;\n                  `}\n                >\n                  <Select options={choices} value={dataFrameIndex} onChange={this.onSelectedFrameChanged} width={30} />\n                </Field>\n              )}\n            </div>\n            {this.renderDataOptions()}\n          </div>\n\n          <div className={styles.options}>\n            <Button variant=\"primary\" onClick={() => this.exportCsv(dataFrames[dataFrameIndex])}>\n              Download CSV\n            </Button>\n          </div>\n        </div>\n\n        <div style={{ flexGrow: 1 }}>\n          <AutoSizer>\n            {({ width, height }) => {\n              if (width === 0) {\n                return null;\n              }\n\n              return (\n                <div style={{ width, height }}>\n                  <Table width={width} height={height} data={dataFrames[dataFrameIndex]} />\n                </div>\n              );\n            }}\n          </AutoSizer>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction buildTransformationOptions() {\n  const transformations: Array<SelectableValue<string>> = [\n    {\n      value: 'Do nothing',\n      label: 'None',\n      transformer: {\n        id: DataTransformerID.noop,\n      },\n    },\n    {\n      value: 'join by time',\n      label: 'Join by time',\n      transformer: {\n        id: DataTransformerID.seriesToColumns,\n        options: { byField: 'Time' },\n      },\n    },\n  ];\n\n  return transformations;\n}\n","import React, { PureComponent } from 'react';\nimport { chain } from 'lodash';\nimport { AppEvents, PanelData, SelectableValue } from '@grafana/data';\nimport { Button, ClipboardButton, Field, JSONFormatter, Select, TextArea } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { appEvents } from 'app/core/core';\nimport { DashboardModel, PanelModel } from '../../state';\nimport { getPanelInspectorStyles } from './styles';\n\nenum ShowContent {\n  PanelJSON = 'panel',\n  PanelData = 'data',\n  DataStructure = 'structure',\n}\n\nconst options: Array<SelectableValue<ShowContent>> = [\n  {\n    label: 'Panel JSON',\n    description: 'The model saved in the dashboard JSON that configures how everything works.',\n    value: ShowContent.PanelJSON,\n  },\n  {\n    label: 'Panel data',\n    description: 'The raw model passed to the panel visualization',\n    value: ShowContent.PanelData,\n  },\n  {\n    label: 'DataFrame structure',\n    description: 'Response info without any values',\n    value: ShowContent.DataStructure,\n  },\n];\n\ninterface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n  data: PanelData;\n  onClose: () => void;\n}\n\ninterface State {\n  show: ShowContent;\n  text: string;\n}\n\nexport class InspectJSONTab extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      show: ShowContent.PanelJSON,\n      text: getSaveModelJSON(props.panel),\n    };\n  }\n\n  onSelectChanged = (item: SelectableValue<ShowContent>) => {\n    let text = '';\n    if (item.value === ShowContent.PanelJSON) {\n      text = getSaveModelJSON(this.props.panel);\n    }\n    this.setState({ text, show: item.value });\n  };\n\n  onTextChanged = (e: React.FormEvent<HTMLTextAreaElement>) => {\n    const text = e.currentTarget.value;\n    this.setState({ text });\n  };\n\n  getJSONObject = (show: ShowContent): any => {\n    if (show === ShowContent.PanelData) {\n      return this.props.data;\n    }\n    if (show === ShowContent.DataStructure) {\n      const series = this.props.data?.series;\n      if (!series) {\n        return { note: 'Missing Response Data' };\n      }\n      return this.props.data.series.map(frame => {\n        const fields = frame.fields.map(field => {\n          return chain(field)\n            .omit('values')\n            .omit('calcs')\n            .omit('display')\n            .value();\n        });\n        return {\n          ...frame,\n          fields,\n        };\n      });\n    }\n    if (show === ShowContent.PanelJSON) {\n      return this.props.panel.getSaveModel();\n    }\n\n    return { note: 'Unknown Object', show };\n  };\n\n  getClipboardText = () => {\n    const { show } = this.state;\n    const obj = this.getJSONObject(show);\n    return JSON.stringify(obj, null, 2);\n  };\n\n  onClipboardCopied = () => {\n    appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n  };\n\n  onApplyPanelModel = () => {\n    const { panel, dashboard, onClose } = this.props;\n\n    try {\n      if (!dashboard.meta.canEdit) {\n        appEvents.emit(AppEvents.alertError, ['Unable to apply']);\n      } else {\n        const updates = JSON.parse(this.state.text);\n        panel.restoreModel(updates);\n        panel.refresh();\n        appEvents.emit(AppEvents.alertSuccess, ['Panel model updated']);\n      }\n    } catch (err) {\n      console.log('Error applyign updates', err);\n      appEvents.emit(AppEvents.alertError, ['Invalid JSON text']);\n    }\n\n    onClose();\n  };\n\n  renderPanelJSON(styles: any) {\n    return (\n      <TextArea spellCheck={false} value={this.state.text} onChange={this.onTextChanged} className={styles.editor} />\n    );\n  }\n\n  render() {\n    const { dashboard } = this.props;\n    const { show } = this.state;\n    const selected = options.find(v => v.value === show);\n    const isPanelJSON = show === ShowContent.PanelJSON;\n    const canEdit = dashboard.meta.canEdit;\n    const styles = getPanelInspectorStyles();\n\n    return (\n      <>\n        <div className={styles.toolbar} aria-label={selectors.components.PanelInspector.Json.content}>\n          <Field label=\"Select source\" className=\"flex-grow-1\">\n            <Select options={options} value={selected} onChange={this.onSelectChanged} />\n          </Field>\n          <ClipboardButton\n            variant=\"secondary\"\n            className={styles.toolbarItem}\n            getText={this.getClipboardText}\n            onClipboardCopy={this.onClipboardCopied}\n          >\n            Copy to clipboard\n          </ClipboardButton>\n          {isPanelJSON && canEdit && (\n            <Button className={styles.toolbarItem} onClick={this.onApplyPanelModel}>\n              Apply\n            </Button>\n          )}\n        </div>\n        <div className={styles.content}>\n          {isPanelJSON ? (\n            this.renderPanelJSON(styles)\n          ) : (\n            <div className={styles.viewer}>\n              <JSONFormatter json={this.getJSONObject(show)} />\n            </div>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nfunction getSaveModelJSON(panel: PanelModel): string {\n  return JSON.stringify(panel.getSaveModel(), null, 2);\n}\n","import React, { FC } from 'react';\nimport { css } from 'emotion';\nimport { stylesFactory, Tab, TabsBar, useTheme } from '@grafana/ui';\nimport { GrafanaTheme, SelectableValue, PanelData, getValueFormat, formattedValueToString } from '@grafana/data';\nimport { InspectTab } from './PanelInspector';\n\ninterface Props {\n  tab: InspectTab;\n  tabs: Array<{ label: string; value: InspectTab }>;\n  panelData: PanelData;\n  onSelectTab: (tab: SelectableValue<InspectTab>) => void;\n}\n\nexport const InspectSubtitle: FC<Props> = ({ tab, tabs, onSelectTab, panelData }) => {\n  const theme = useTheme();\n  const styles = getStyles(theme);\n\n  return (\n    <>\n      <div className=\"muted\">{formatStats(panelData)}</div>\n      <TabsBar className={styles.tabsBar}>\n        {tabs.map((t, index) => {\n          return (\n            <Tab\n              key={`${t.value}-${index}`}\n              label={t.label}\n              active={t.value === tab}\n              onChangeTab={() => onSelectTab(t)}\n            />\n          );\n        })}\n      </TabsBar>\n    </>\n  );\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    tabsBar: css`\n      padding-left: ${theme.spacing.md};\n      margin: ${theme.spacing.lg} -${theme.spacing.sm} -${theme.spacing.lg} -${theme.spacing.lg};\n    `,\n  };\n});\n\nfunction formatStats(panelData: PanelData) {\n  const { request } = panelData;\n  if (!request) {\n    return '';\n  }\n\n  const queryCount = request.targets.length;\n  const requestTime = request.endTime ? request.endTime - request.startTime : 0;\n  const formatted = formattedValueToString(getValueFormat('ms')(requestTime));\n\n  return `${queryCount} queries with total query time of ${formatted}`;\n}\n","import React, { PureComponent } from 'react';\nimport { Unsubscribable } from 'rxjs';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { InspectSubtitle } from './InspectSubtitle';\nimport { InspectJSONTab } from './InspectJSONTab';\nimport { QueryInspector } from './QueryInspector';\n\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { CustomScrollbar, Drawer, JSONFormatter, TabContent } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getDataSourceSrv, getLocationSrv } from '@grafana/runtime';\nimport {\n  DataFrame,\n  DataQueryError,\n  DataSourceApi,\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  LoadingState,\n  PanelData,\n  PanelPlugin,\n  QueryResultMetaStat,\n  SelectableValue,\n  TimeZone,\n} from '@grafana/data';\nimport { config } from 'app/core/config';\nimport { getPanelInspectorStyles } from './styles';\nimport { StoreState } from 'app/types';\nimport { InspectDataTab } from './InspectDataTab';\nimport { supportsDataQuery } from '../PanelEditor/utils';\nimport { GetDataOptions } from '../../state/PanelQueryRunner';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n  defaultTab: InspectTab;\n}\n\nexport interface ConnectedProps {\n  plugin?: PanelPlugin | null;\n}\n\nexport type Props = OwnProps & ConnectedProps;\n\nexport enum InspectTab {\n  Data = 'data',\n  Meta = 'meta', // When result metadata exists\n  Error = 'error',\n  Stats = 'stats',\n  JSON = 'json',\n  Query = 'query',\n}\n\ninterface State {\n  isLoading: boolean;\n  // The last raw response\n  last: PanelData;\n  // Data from the last response\n  data: DataFrame[];\n  // The Selected Tab\n  currentTab: InspectTab;\n  // If the datasource supports custom metadata\n  metaDS?: DataSourceApi;\n  // drawer width\n  drawerWidth: string;\n  withTransforms: boolean;\n  withFieldConfig: boolean;\n}\n\nexport class PanelInspectorUnconnected extends PureComponent<Props, State> {\n  querySubscription?: Unsubscribable;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      last: {} as PanelData,\n      data: [],\n      currentTab: props.defaultTab ?? InspectTab.Data,\n      drawerWidth: '50%',\n      withTransforms: true,\n      withFieldConfig: false,\n    };\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (plugin) {\n      this.init();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (\n      prevProps.plugin !== this.props.plugin ||\n      this.state.withTransforms !== prevState.withTransforms ||\n      this.state.withFieldConfig !== prevState.withFieldConfig\n    ) {\n      this.init();\n    }\n  }\n\n  /**\n   * This init process where we do not have a plugin to start with is to handle full page reloads with inspect url parameter\n   * When this inspect drawer loads the plugin is not yet loaded.\n   */\n  init() {\n    const { plugin, panel } = this.props;\n    const { withTransforms, withFieldConfig } = this.state;\n\n    if (plugin && !plugin.meta.skipDataQuery) {\n      if (this.querySubscription) {\n        this.querySubscription.unsubscribe();\n      }\n      this.querySubscription = panel\n        .getQueryRunner()\n        .getData({ withTransforms, withFieldConfig })\n        .subscribe({\n          next: data => this.onUpdateData(data),\n        });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n    }\n  }\n\n  async onUpdateData(lastResult: PanelData) {\n    let metaDS: DataSourceApi;\n    const data = lastResult.series;\n    const error = lastResult.error;\n\n    const targets = lastResult.request?.targets || [];\n\n    // Find the first DataSource wanting to show custom metadata\n    if (data && targets.length) {\n      for (const frame of data) {\n        if (frame.meta && frame.meta.custom) {\n          // get data source from first query\n          const dataSource = await getDataSourceSrv().get(targets[0].datasource);\n\n          if (dataSource && dataSource.components?.MetadataInspector) {\n            metaDS = dataSource;\n            break;\n          }\n        }\n      }\n    }\n\n    // Set last result, but no metadata inspector\n    this.setState(prevState => ({\n      isLoading: lastResult.state === LoadingState.Loading,\n      last: lastResult,\n      data,\n      metaDS,\n      currentTab: error ? InspectTab.Error : prevState.currentTab,\n    }));\n  }\n\n  onClose = () => {\n    getLocationSrv().update({\n      query: { inspect: null, inspectTab: null },\n      partial: true,\n    });\n  };\n\n  onToggleExpand = () => {\n    this.setState(prevState => ({\n      drawerWidth: prevState.drawerWidth === '100%' ? '40%' : '100%',\n    }));\n  };\n\n  onSelectTab = (item: SelectableValue<InspectTab>) => {\n    this.setState({ currentTab: item.value || InspectTab.Data });\n  };\n  onDataTabOptionsChange = (options: GetDataOptions) => {\n    this.setState({ withTransforms: !!options.withTransforms, withFieldConfig: !!options.withFieldConfig });\n  };\n\n  renderMetadataInspector() {\n    const { metaDS, data } = this.state;\n    if (!metaDS || !metaDS.components?.MetadataInspector) {\n      return <div>No Metadata Inspector</div>;\n    }\n    return <metaDS.components.MetadataInspector datasource={metaDS} data={data} />;\n  }\n\n  renderDataTab() {\n    const { last, isLoading, withFieldConfig, withTransforms } = this.state;\n    return (\n      <InspectDataTab\n        dashboard={this.props.dashboard}\n        panel={this.props.panel}\n        data={last.series}\n        isLoading={isLoading}\n        options={{\n          withFieldConfig,\n          withTransforms,\n        }}\n        onOptionsChange={this.onDataTabOptionsChange}\n      />\n    );\n  }\n\n  renderErrorTab(error?: DataQueryError) {\n    if (!error) {\n      return null;\n    }\n    if (error.data) {\n      return (\n        <>\n          <h3>{error.data.message}</h3>\n          <JSONFormatter json={error} open={2} />\n        </>\n      );\n    }\n    return <div>{error.message}</div>;\n  }\n\n  renderStatsTab() {\n    const { last } = this.state;\n    const { request } = last;\n\n    if (!request) {\n      return null;\n    }\n\n    let stats: QueryResultMetaStat[] = [];\n\n    const requestTime = request.endTime ? request.endTime - request.startTime : -1;\n    const processingTime = last.timings?.dataProcessingTime || -1;\n    let dataRows = 0;\n\n    for (const frame of last.series) {\n      dataRows += frame.length;\n    }\n\n    stats.push({ displayName: 'Total request time', value: requestTime, unit: 'ms' });\n    stats.push({ displayName: 'Data processing time', value: processingTime, unit: 'ms' });\n    stats.push({ displayName: 'Number of queries', value: request.targets.length });\n    stats.push({ displayName: 'Total number rows', value: dataRows });\n\n    let dataStats: QueryResultMetaStat[] = [];\n\n    for (const series of last.series) {\n      if (series.meta && series.meta.stats) {\n        dataStats = dataStats.concat(series.meta.stats);\n      }\n    }\n\n    return (\n      <div aria-label={selectors.components.PanelInspector.Stats.content}>\n        {this.renderStatsTable('Stats', stats)}\n        {this.renderStatsTable('Data source stats', dataStats)}\n      </div>\n    );\n  }\n\n  renderStatsTable(name: string, stats: QueryResultMetaStat[]) {\n    if (!stats || !stats.length) {\n      return null;\n    }\n\n    const { dashboard } = this.props;\n\n    return (\n      <div style={{ paddingBottom: '16px' }}>\n        <table className=\"filter-table width-30\">\n          <tbody>\n            {stats.map((stat, index) => {\n              return (\n                <tr key={`${stat.displayName}-${index}`}>\n                  <td>{stat.displayName}</td>\n                  <td style={{ textAlign: 'right' }}>{formatStat(stat, dashboard.getTimezone())}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  drawerSubtitle(tabs: Array<{ label: string; value: InspectTab }>, activeTab: InspectTab) {\n    const { last } = this.state;\n\n    return <InspectSubtitle tabs={tabs} tab={activeTab} panelData={last} onSelectTab={this.onSelectTab} />;\n  }\n\n  getTabs() {\n    const { dashboard, plugin } = this.props;\n    const { last } = this.state;\n    const error = last?.error;\n    const tabs = [];\n\n    if (supportsDataQuery(plugin)) {\n      tabs.push({ label: 'Data', value: InspectTab.Data });\n      tabs.push({ label: 'Stats', value: InspectTab.Stats });\n    }\n\n    if (this.state.metaDS) {\n      tabs.push({ label: 'Meta Data', value: InspectTab.Meta });\n    }\n\n    tabs.push({ label: 'JSON', value: InspectTab.JSON });\n\n    if (error && error.message) {\n      tabs.push({ label: 'Error', value: InspectTab.Error });\n    }\n\n    if (dashboard.meta.canEdit && supportsDataQuery(plugin)) {\n      tabs.push({ label: 'Query', value: InspectTab.Query });\n    }\n    return tabs;\n  }\n\n  render() {\n    const { panel, dashboard, plugin } = this.props;\n    const { currentTab } = this.state;\n\n    if (!plugin) {\n      return null;\n    }\n\n    const { last, drawerWidth } = this.state;\n    const styles = getPanelInspectorStyles();\n    const error = last?.error;\n    const tabs = this.getTabs();\n\n    // Validate that the active tab is actually valid and allowed\n    let activeTab = currentTab;\n    if (!tabs.find(item => item.value === currentTab)) {\n      activeTab = InspectTab.JSON;\n    }\n\n    return (\n      <Drawer\n        title={`Inspect: ${panel.title}` || 'Panel inspect'}\n        subtitle={this.drawerSubtitle(tabs, activeTab)}\n        width={drawerWidth}\n        onClose={this.onClose}\n        expandable\n      >\n        {activeTab === InspectTab.Data && this.renderDataTab()}\n        <CustomScrollbar autoHeightMin=\"100%\">\n          <TabContent className={styles.tabContent}>\n            {activeTab === InspectTab.Meta && this.renderMetadataInspector()}\n            {activeTab === InspectTab.JSON && (\n              <InspectJSONTab panel={panel} dashboard={dashboard} data={last} onClose={this.onClose} />\n            )}\n            {activeTab === InspectTab.Error && this.renderErrorTab(error)}\n            {activeTab === InspectTab.Stats && this.renderStatsTab()}\n            {activeTab === InspectTab.Query && <QueryInspector panel={panel} />}\n          </TabContent>\n        </CustomScrollbar>\n      </Drawer>\n    );\n  }\n}\n\nfunction formatStat(stat: QueryResultMetaStat, timeZone?: TimeZone): string {\n  const display = getDisplayProcessor({\n    field: {\n      type: FieldType.number,\n      config: stat,\n    },\n    theme: config.theme,\n    timeZone,\n  });\n  return formattedValueToString(display(stat.value));\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  const panelState = state.dashboard.panels[props.panel.id];\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n  };\n};\n\nexport const PanelInspector = connect(mapStateToProps)(PanelInspectorUnconnected);\n","import React, { PureComponent } from 'react';\nimport { Button, JSONFormatter, LoadingPlaceholder } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AppEvents, PanelEvents } from '@grafana/data';\n\nimport appEvents from 'app/core/app_events';\nimport { CopyToClipboard } from 'app/core/components/CopyToClipboard/CopyToClipboard';\nimport { CoreEvents } from 'app/types';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { getPanelInspectorStyles } from './styles';\nimport { supportsDataQuery } from '../PanelEditor/utils';\n\ninterface DsQuery {\n  isLoading: boolean;\n  response: {};\n}\n\ninterface Props {\n  panel: PanelModel;\n}\n\ninterface State {\n  allNodesExpanded: boolean;\n  isMocking: boolean;\n  mockedResponse: string;\n  dsQuery: DsQuery;\n}\n\nexport class QueryInspector extends PureComponent<Props, State> {\n  formattedJson: any;\n  clipboard: any;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      allNodesExpanded: null,\n      isMocking: false,\n      mockedResponse: '',\n      dsQuery: {\n        isLoading: false,\n        response: {},\n      },\n    };\n  }\n\n  componentDidMount() {\n    appEvents.on(CoreEvents.dsRequestResponse, this.onDataSourceResponse);\n    appEvents.on(CoreEvents.dsRequestError, this.onRequestError);\n    this.props.panel.events.on(PanelEvents.refresh, this.onPanelRefresh);\n  }\n\n  onIssueNewQuery = () => {\n    this.props.panel.refresh();\n  };\n\n  componentWillUnmount() {\n    const { panel } = this.props;\n\n    appEvents.off(CoreEvents.dsRequestResponse, this.onDataSourceResponse);\n    appEvents.on(CoreEvents.dsRequestError, this.onRequestError);\n\n    panel.events.off(PanelEvents.refresh, this.onPanelRefresh);\n  }\n\n  handleMocking(response: any) {\n    const { mockedResponse } = this.state;\n    let mockedData;\n    try {\n      mockedData = JSON.parse(mockedResponse);\n    } catch (err) {\n      appEvents.emit(AppEvents.alertError, ['R: Failed to parse mocked response']);\n      return;\n    }\n\n    response.data = mockedData;\n  }\n\n  onPanelRefresh = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      dsQuery: {\n        isLoading: true,\n        response: {},\n      },\n    }));\n  };\n\n  onRequestError = (err: any) => {\n    this.onDataSourceResponse(err);\n  };\n\n  onDataSourceResponse = (response: any = {}) => {\n    if (this.state.isMocking) {\n      this.handleMocking(response);\n      return;\n    }\n\n    response = { ...response }; // clone - dont modify the response\n\n    if (response.headers) {\n      delete response.headers;\n    }\n\n    if (response.config) {\n      response.request = response.config;\n\n      delete response.config;\n      delete response.request.transformRequest;\n      delete response.request.transformResponse;\n      delete response.request.paramSerializer;\n      delete response.request.jsonpCallbackParam;\n      delete response.request.headers;\n      delete response.request.requestId;\n      delete response.request.inspect;\n      delete response.request.retry;\n      delete response.request.timeout;\n    }\n\n    if (response.data) {\n      response.response = response.data;\n\n      delete response.config;\n      delete response.data;\n      delete response.status;\n      delete response.statusText;\n      delete response.ok;\n      delete response.url;\n      delete response.redirected;\n      delete response.type;\n      delete response.$$config;\n    }\n\n    this.setState(prevState => ({\n      ...prevState,\n      dsQuery: {\n        isLoading: false,\n        response: response,\n      },\n    }));\n  };\n\n  setFormattedJson = (formattedJson: any) => {\n    this.formattedJson = formattedJson;\n  };\n\n  getTextForClipboard = () => {\n    return JSON.stringify(this.formattedJson, null, 2);\n  };\n\n  onClipboardSuccess = () => {\n    appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n  };\n\n  onToggleExpand = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      allNodesExpanded: !this.state.allNodesExpanded,\n    }));\n  };\n\n  onToggleMocking = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      isMocking: !this.state.isMocking,\n    }));\n  };\n\n  getNrOfOpenNodes = () => {\n    if (this.state.allNodesExpanded === null) {\n      return 3; // 3 is default, ie when state is null\n    } else if (this.state.allNodesExpanded) {\n      return 20;\n    }\n    return 1;\n  };\n\n  setMockedResponse = (evt: any) => {\n    const mockedResponse = evt.target.value;\n    this.setState(prevState => ({\n      ...prevState,\n      mockedResponse,\n    }));\n  };\n\n  render() {\n    const { allNodesExpanded } = this.state;\n    const { response, isLoading } = this.state.dsQuery;\n    const openNodes = this.getNrOfOpenNodes();\n    const styles = getPanelInspectorStyles();\n    const haveData = Object.keys(response).length > 0;\n\n    if (!supportsDataQuery(this.props.panel.plugin)) {\n      return null;\n    }\n\n    return (\n      <>\n        <div aria-label={selectors.components.PanelInspector.Query.content}>\n          <h3 className=\"section-heading\">Query inspector</h3>\n          <p className=\"small muted\">\n            Query inspector allows you to view raw request and response. To collect this data Grafana needs to issue a\n            new query. Hit refresh button below to trigger a new query.\n          </p>\n        </div>\n        <div className={styles.toolbar}>\n          <Button\n            icon=\"sync\"\n            onClick={this.onIssueNewQuery}\n            aria-label={selectors.components.PanelInspector.Query.refreshButton}\n          >\n            Refresh\n          </Button>\n\n          {haveData && allNodesExpanded && (\n            <Button icon=\"minus\" variant=\"secondary\" className={styles.toolbarItem} onClick={this.onToggleExpand}>\n              Collapse all\n            </Button>\n          )}\n          {haveData && !allNodesExpanded && (\n            <Button icon=\"plus\" variant=\"secondary\" className={styles.toolbarItem} onClick={this.onToggleExpand}>\n              Expand all\n            </Button>\n          )}\n\n          {haveData && (\n            <CopyToClipboard\n              text={this.getTextForClipboard}\n              onSuccess={this.onClipboardSuccess}\n              elType=\"div\"\n              className={styles.toolbarItem}\n            >\n              <Button icon=\"copy\" variant=\"secondary\">\n                Copy to clipboard\n              </Button>\n            </CopyToClipboard>\n          )}\n          <div className=\"flex-grow-1\" />\n        </div>\n        <div className={styles.contentQueryInspector}>\n          {isLoading && <LoadingPlaceholder text=\"Loading query inspector...\" />}\n          {!isLoading && haveData && (\n            <JSONFormatter json={response} open={openNodes} onDidRender={this.setFormattedJson} />\n          )}\n          {!isLoading && !haveData && <p className=\"muted\">No request & response collected yet. Hit refresh button</p>}\n        </div>\n      </>\n    );\n  }\n}\n","import { css } from 'emotion';\nimport { config } from 'app/core/config';\nimport { stylesFactory } from '@grafana/ui';\n\nexport const getPanelInspectorStyles = stylesFactory(() => {\n  return {\n    wrap: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      flex: 1 1 0;\n    `,\n    toolbar: css`\n      display: flex;\n      width: 100%;\n      flex-grow: 0;\n      align-items: center;\n      justify-content: flex-end;\n      margin-bottom: ${config.theme.spacing.sm};\n    `,\n    toolbarItem: css`\n      margin-left: ${config.theme.spacing.md};\n    `,\n    content: css`\n      flex-grow: 1;\n      padding-bottom: 16px;\n    `,\n    contentQueryInspector: css`\n      flex-grow: 1;\n      padding: ${config.theme.spacing.md} 0;\n    `,\n    editor: css`\n      font-family: monospace;\n      height: 100%;\n      flex-grow: 1;\n    `,\n    viewer: css`\n      overflow: scroll;\n    `,\n    dataFrameSelect: css`\n      flex-grow: 2;\n    `,\n    tabContent: css`\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    `,\n    dataTabContent: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n    `,\n    actionsWrapper: css`\n      display: flex;\n      flex-wrap: wrap;\n    `,\n    leftActions: css`\n      display: flex;\n      flex-grow: 1;\n    `,\n    options: css`\n      margin-top: 19px;\n    `,\n    dataDisplayOptions: css`\n      flex-grow: 1;\n      min-width: 300px;\n      margin-right: ${config.theme.spacing.sm};\n    `,\n    selects: css`\n      display: flex;\n      > * {\n        margin-right: ${config.theme.spacing.sm};\n      }\n    `,\n  };\n});\n","import { CSSProperties } from 'react';\nimport { PanelModel } from '../../state/PanelModel';\nimport { DisplayMode } from './types';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from 'app/core/constants';\nimport { PanelPlugin } from '@grafana/data';\n\nexport function calculatePanelSize(mode: DisplayMode, width: number, height: number, panel: PanelModel): CSSProperties {\n  if (mode === DisplayMode.Fill) {\n    return { width, height };\n  }\n  const colWidth = (window.innerWidth - GRID_CELL_VMARGIN * 4) / GRID_COLUMN_COUNT;\n  const pWidth = colWidth * panel.gridPos.w;\n  const pHeight = GRID_CELL_HEIGHT * panel.gridPos.h;\n  const scale = Math.min(width / pWidth, height / pHeight);\n\n  if (mode === DisplayMode.Exact && pWidth <= width && pHeight <= height) {\n    return {\n      width: pWidth,\n      height: pHeight,\n    };\n  }\n\n  return {\n    width: pWidth * scale,\n    height: pHeight * scale,\n  };\n}\n\nexport function supportsDataQuery(plugin: PanelPlugin | undefined): boolean {\n  return plugin?.meta.skipDataQuery === false;\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { connect, MapStateToProps, MapDispatchToProps } from 'react-redux';\n\n// Components\nimport { PanelChrome } from './PanelChrome';\nimport { PanelChromeAngular } from './PanelChromeAngular';\n\n// Actions\nimport { initDashboardPanel } from '../state/actions';\nimport { updateLocation } from 'app/core/reducers/location';\n\n// Types\nimport { PanelModel, DashboardModel } from '../state';\nimport { StoreState } from 'app/types';\nimport { PanelPlugin } from '@grafana/data';\n\nexport interface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  isEditing: boolean;\n  isViewing: boolean;\n  isInView: boolean;\n}\n\nexport interface ConnectedProps {\n  plugin?: PanelPlugin | null;\n}\n\nexport interface DispatchProps {\n  initDashboardPanel: typeof initDashboardPanel;\n  updateLocation: typeof updateLocation;\n}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport interface State {\n  isLazy: boolean;\n}\n\nexport class DashboardPanelUnconnected extends PureComponent<Props, State> {\n  element: HTMLElement;\n  specialPanels: { [key: string]: Function } = {};\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLazy: !props.isInView,\n    };\n  }\n\n  componentDidMount() {\n    this.props.initDashboardPanel(this.props.panel);\n  }\n\n  componentDidUpdate() {\n    if (this.state.isLazy && this.props.isInView) {\n      this.setState({ isLazy: false });\n    }\n  }\n\n  onMouseEnter = () => {\n    this.props.dashboard.setPanelFocus(this.props.panel.id);\n  };\n\n  onMouseLeave = () => {\n    this.props.dashboard.setPanelFocus(0);\n  };\n\n  renderPanel(plugin: PanelPlugin) {\n    const { dashboard, panel, isViewing, isInView, isEditing, updateLocation } = this.props;\n\n    return (\n      <AutoSizer>\n        {({ width, height }) => {\n          if (width === 0) {\n            return null;\n          }\n\n          if (plugin.angularPanelCtrl) {\n            return (\n              <PanelChromeAngular\n                plugin={plugin}\n                panel={panel}\n                dashboard={dashboard}\n                isViewing={isViewing}\n                isEditing={isEditing}\n                isInView={isInView}\n                width={width}\n                height={height}\n              />\n            );\n          }\n\n          return (\n            <PanelChrome\n              plugin={plugin}\n              panel={panel}\n              dashboard={dashboard}\n              isViewing={isViewing}\n              isEditing={isEditing}\n              isInView={isInView}\n              width={width}\n              height={height}\n              updateLocation={updateLocation}\n            />\n          );\n        }}\n      </AutoSizer>\n    );\n  }\n\n  render() {\n    const { isViewing, plugin } = this.props;\n    const { isLazy } = this.state;\n\n    // if we have not loaded plugin exports yet, wait\n    if (!plugin) {\n      return null;\n    }\n\n    // If we are lazy state don't render anything\n    if (isLazy) {\n      return null;\n    }\n\n    const panelWrapperClass = classNames({\n      'panel-wrapper': true,\n      'panel-wrapper--view': isViewing,\n    });\n\n    return (\n      <div className={panelWrapperClass} onMouseEnter={this.onMouseEnter} onMouseLeave={this.onMouseLeave}>\n        {this.renderPanel(plugin)}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  const panelState = state.dashboard.panels[props.panel.id];\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = { initDashboardPanel, updateLocation };\n\nexport const DashboardPanel = connect(mapStateToProps, mapDispatchToProps)(DashboardPanelUnconnected);\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { Unsubscribable } from 'rxjs';\n// Components\nimport { PanelHeader } from './PanelHeader/PanelHeader';\nimport { ErrorBoundary } from '@grafana/ui';\n// Utils & Services\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { profiler } from 'app/core/profiler';\nimport { getProcessedDataFrames } from '../state/runRequest';\nimport config from 'app/core/config';\nimport { updateLocation } from 'app/core/actions';\n// Types\nimport { DashboardModel, PanelModel } from '../state';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport {\n  LoadingState,\n  AbsoluteTimeRange,\n  DefaultTimeRange,\n  toUtc,\n  toDataFrameDTO,\n  PanelEvents,\n  PanelData,\n  PanelPlugin,\n  FieldConfigSource,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nconst DEFAULT_PLUGIN_ERROR = 'Error in plugin';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing?: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n  updateLocation: typeof updateLocation;\n}\n\nexport interface State {\n  isFirstLoad: boolean;\n  renderCounter: number;\n  errorMessage?: string;\n  refreshWhenInView: boolean;\n  data: PanelData;\n}\n\nexport class PanelChrome extends PureComponent<Props, State> {\n  timeSrv: TimeSrv = getTimeSrv();\n  querySubscription: Unsubscribable;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isFirstLoad: true,\n      renderCounter: 0,\n      refreshWhenInView: false,\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: DefaultTimeRange,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel, dashboard, isEditing } = this.props;\n\n    panel.events.on(PanelEvents.refresh, this.onRefresh);\n    panel.events.on(PanelEvents.render, this.onRender);\n\n    dashboard.panelInitialized(this.props.panel);\n\n    // Move snapshot data into the query response\n    if (this.hasPanelSnapshot) {\n      this.setState({\n        data: {\n          ...this.state.data,\n          state: LoadingState.Done,\n          series: getProcessedDataFrames(panel.snapshotData),\n        },\n        isFirstLoad: false,\n      });\n    } else {\n      if (isEditing) {\n        this.querySubscription = panel\n          .getQueryRunner()\n          .getData()\n          .subscribe({\n            next: data => this.onDataUpdate(data),\n          });\n      }\n\n      if (!this.wantsQueryExecution) {\n        this.setState({ isFirstLoad: false });\n      }\n    }\n\n    if (!this.querySubscription) {\n      this.querySubscription = panel\n        .getQueryRunner()\n        .getData()\n        .subscribe({\n          next: data => this.onDataUpdate(data),\n        });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.panel.events.off(PanelEvents.refresh, this.onRefresh);\n    this.props.panel.events.off(PanelEvents.render, this.onRender);\n\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { isInView } = this.props;\n\n    // View state has changed\n    if (isInView !== prevProps.isInView) {\n      if (isInView) {\n        // Check if we need a delayed refresh\n        if (this.state.refreshWhenInView) {\n          this.onRefresh();\n        }\n      }\n    }\n  }\n\n  // Updates the response with information from the stream\n  // The next is outside a react synthetic event so setState is not batched\n  // So in this context we can only do a single call to setState\n  onDataUpdate(data: PanelData) {\n    if (!this.props.isInView) {\n      // Ignore events when not visible.\n      // The call will be repeated when the panel comes into view\n      return;\n    }\n\n    let { isFirstLoad } = this.state;\n    let errorMessage: string | undefined;\n\n    switch (data.state) {\n      case LoadingState.Loading:\n        // Skip updating state data if it is already in loading state\n        // This is to avoid rendering partial loading responses\n        if (this.state.data.state === LoadingState.Loading) {\n          return;\n        }\n        break;\n      case LoadingState.Error:\n        const { error } = data;\n        if (error) {\n          if (errorMessage !== error.message) {\n            errorMessage = error.message;\n          }\n        }\n        break;\n      case LoadingState.Done:\n        // If we are doing a snapshot save data in panel model\n        if (this.props.dashboard.snapshot) {\n          this.props.panel.snapshotData = data.series.map(frame => toDataFrameDTO(frame));\n        }\n        if (isFirstLoad) {\n          isFirstLoad = false;\n        }\n        break;\n    }\n\n    this.setState({ isFirstLoad, errorMessage, data });\n  }\n\n  onRefresh = () => {\n    const { panel, isInView, width } = this.props;\n    if (!isInView) {\n      console.log('Refresh when panel is visible', panel.id);\n      this.setState({ refreshWhenInView: true });\n      return;\n    }\n\n    const timeData = applyPanelTimeOverrides(panel, this.timeSrv.timeRange());\n\n    // Issue Query\n    if (this.wantsQueryExecution) {\n      if (width < 0) {\n        console.log('Refresh skippted, no width yet... wait till we know');\n        return;\n      }\n\n      panel.getQueryRunner().run({\n        datasource: panel.datasource,\n        queries: panel.targets,\n        panelId: panel.id,\n        dashboardId: this.props.dashboard.id,\n        timezone: this.props.dashboard.getTimezone(),\n        timeRange: timeData.timeRange,\n        timeInfo: timeData.timeInfo,\n        maxDataPoints: panel.maxDataPoints || width,\n        minInterval: panel.interval,\n        scopedVars: panel.scopedVars,\n        cacheTimeout: panel.cacheTimeout,\n        transformations: panel.transformations,\n      });\n    } else {\n      // The panel should render on refresh as well if it doesn't have a query, like clock panel\n      this.onRender();\n    }\n  };\n\n  onRender = () => {\n    const stateUpdate = { renderCounter: this.state.renderCounter + 1 };\n    this.setState(stateUpdate);\n  };\n\n  onOptionsChange = (options: any) => {\n    this.props.panel.updateOptions(options);\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    this.props.panel.updateFieldConfig(config);\n  };\n\n  onPanelError = (message: string) => {\n    if (this.state.errorMessage !== message) {\n      this.setState({ errorMessage: message });\n    }\n  };\n\n  get hasPanelSnapshot() {\n    const { panel } = this.props;\n    return panel.snapshotData && panel.snapshotData.length;\n  }\n\n  get wantsQueryExecution() {\n    return !(this.props.plugin.meta.skipDataQuery || this.hasPanelSnapshot);\n  }\n\n  onChangeTimeRange = (timeRange: AbsoluteTimeRange) => {\n    this.timeSrv.setTime({\n      from: toUtc(timeRange.from),\n      to: toUtc(timeRange.to),\n    });\n  };\n\n  renderPanel(width: number, height: number) {\n    const { panel, plugin } = this.props;\n    const { renderCounter, data, isFirstLoad } = this.state;\n    const { theme } = config;\n\n    // This is only done to increase a counter that is used by backend\n    // image rendering to know when to capture image\n    const loading = data.state;\n    if (loading === LoadingState.Done) {\n      profiler.renderingCompleted();\n    }\n\n    // do not render component until we have first data\n    if (isFirstLoad && (loading === LoadingState.Loading || loading === LoadingState.NotStarted)) {\n      return null;\n    }\n\n    const PanelComponent = plugin.panel;\n    const timeRange = data.timeRange || this.timeSrv.timeRange();\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    const panelWidth = width - chromePadding * 2 - PANEL_BORDER;\n    const innerPanelHeight = height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n    const panelOptions = panel.getOptions();\n\n    return (\n      <>\n        <div className={panelContentClassNames}>\n          <PanelComponent\n            id={panel.id}\n            data={data}\n            timeRange={timeRange}\n            timeZone={this.props.dashboard.getTimezone()}\n            options={panelOptions}\n            fieldConfig={panel.fieldConfig}\n            transparent={panel.transparent}\n            width={panelWidth}\n            height={innerPanelHeight}\n            renderCounter={renderCounter}\n            replaceVariables={panel.replaceVariables}\n            onOptionsChange={this.onOptionsChange}\n            onFieldConfigChange={this.onFieldConfigChange}\n            onChangeTimeRange={this.onChangeTimeRange}\n          />\n        </div>\n      </>\n    );\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { errorMessage, data } = this.state;\n\n    // always show normal header if we have an error message\n    if (errorMessage) {\n      return false;\n    }\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, width, height, updateLocation } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': true,\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n    });\n\n    return (\n      <div className={containerClassNames} aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}>\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          scopedVars={panel.scopedVars}\n          links={panel.links}\n          error={errorMessage}\n          isEditing={isEditing}\n          isViewing={isViewing}\n          data={data}\n          updateLocation={updateLocation}\n        />\n        <ErrorBoundary>\n          {({ error }) => {\n            if (error) {\n              this.onPanelError(error.message || DEFAULT_PLUGIN_ERROR);\n              return null;\n            }\n            return this.renderPanel(width, height);\n          }}\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { Unsubscribable } from 'rxjs';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\n// Components\nimport { PanelHeader } from './PanelHeader/PanelHeader';\n// Utils & Services\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\nimport { setPanelAngularComponent } from '../state/reducers';\nimport config from 'app/core/config';\n// Types\nimport { DashboardModel, PanelModel } from '../state';\nimport { StoreState } from 'app/types';\nimport { DefaultTimeRange, LoadingState, PanelData, PanelEvents, PanelPlugin } from '@grafana/data';\nimport { updateLocation } from 'app/core/actions';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n}\n\ninterface ConnectedProps {\n  angularComponent?: AngularComponent | null;\n}\n\ninterface DispatchProps {\n  setPanelAngularComponent: typeof setPanelAngularComponent;\n  updateLocation: typeof updateLocation;\n}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport interface State {\n  data: PanelData;\n  errorMessage?: string;\n  alertState?: string;\n}\n\ninterface AngularScopeProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  size: {\n    height: number;\n    width: number;\n  };\n}\n\nexport class PanelChromeAngularUnconnected extends PureComponent<Props, State> {\n  element: HTMLElement | null = null;\n  timeSrv: TimeSrv = getTimeSrv();\n  scopeProps?: AngularScopeProps;\n  querySubscription: Unsubscribable;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: DefaultTimeRange,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n    this.loadAngularPanel();\n\n    // subscribe to data events\n    const queryRunner = panel.getQueryRunner();\n    this.querySubscription = queryRunner.getData({ withTransforms: false }).subscribe({\n      next: (data: PanelData) => this.onPanelDataUpdate(data),\n    });\n  }\n\n  subscribeToRenderEvent() {\n    // Subscribe to render event, this is as far as I know only needed for changes to title & transparent\n    // These changes are modified in the model and only way to communicate that change is via this event\n    // Need to find another solution for this in tthe future (panel title in redux?)\n    this.props.panel.events.on(PanelEvents.render, this.onPanelRenderEvent);\n  }\n\n  onPanelRenderEvent = (payload?: any) => {\n    const { alertState } = this.state;\n\n    if (payload && payload.alertState && this.props.panel.alert) {\n      this.setState({ alertState: payload.alertState });\n    } else if (payload && payload.alertState && !this.props.panel.alert) {\n      // when user deletes alert in panel editor the source panel needs to refresh as this is in the mutable state and\n      // will not automatically re render\n      this.setState({ alertState: undefined });\n    } else if (payload && alertState) {\n      this.setState({ alertState: undefined });\n    } else {\n      // only needed for detecting title updates right now fix before 7.0\n      this.forceUpdate();\n    }\n  };\n\n  onPanelDataUpdate(data: PanelData) {\n    let errorMessage: string | undefined;\n\n    if (data.state === LoadingState.Error) {\n      const { error } = data;\n      if (error) {\n        if (errorMessage !== error.message) {\n          errorMessage = error.message;\n        }\n      }\n    }\n\n    this.setState({ data, errorMessage });\n  }\n\n  componentWillUnmount() {\n    this.cleanUpAngularPanel();\n\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n    }\n\n    this.props.panel.events.off(PanelEvents.render, this.onPanelRenderEvent);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { plugin, height, width, panel } = this.props;\n\n    if (prevProps.plugin !== plugin) {\n      this.cleanUpAngularPanel();\n      this.loadAngularPanel();\n    }\n\n    if (prevProps.width !== width || prevProps.height !== height) {\n      if (this.scopeProps) {\n        this.scopeProps.size.height = this.getInnerPanelHeight();\n        this.scopeProps.size.width = this.getInnerPanelWidth();\n        panel.events.emit(PanelEvents.panelSizeChanged);\n      }\n    }\n  }\n\n  getInnerPanelHeight() {\n    const { plugin, height } = this.props;\n    const { theme } = config;\n\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  getInnerPanelWidth() {\n    const { plugin, width } = this.props;\n    const { theme } = config;\n\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return width - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  loadAngularPanel() {\n    const { panel, dashboard, setPanelAngularComponent } = this.props;\n\n    // if we have no element or already have loaded the panel return\n    if (!this.element) {\n      return;\n    }\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n\n    this.scopeProps = {\n      panel: panel,\n      dashboard: dashboard,\n      size: { width: this.getInnerPanelWidth(), height: this.getInnerPanelHeight() },\n    };\n\n    setPanelAngularComponent({\n      panelId: panel.id,\n      angularComponent: loader.load(this.element, this.scopeProps, template),\n    });\n\n    // need to to this every time we load an angular as all events are unsubscribed when panel is destroyed\n    this.subscribeToRenderEvent();\n  }\n\n  cleanUpAngularPanel() {\n    const { angularComponent, setPanelAngularComponent, panel } = this.props;\n\n    if (angularComponent) {\n      angularComponent.destroy();\n    }\n\n    setPanelAngularComponent({ panelId: panel.id, angularComponent: null });\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { errorMessage, data } = this.state;\n\n    // always show normal header if we have an error message\n    if (errorMessage) {\n      return false;\n    }\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, plugin, angularComponent, updateLocation } = this.props;\n    const { errorMessage, data, alertState } = this.state;\n    const { transparent } = panel;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': true,\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n      'panel-has-alert': panel.alert !== undefined,\n      [`panel-alert-state--${alertState}`]: alertState !== undefined,\n    });\n\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n\n    return (\n      <div className={containerClassNames} aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}>\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          scopedVars={panel.scopedVars}\n          angularComponent={angularComponent}\n          links={panel.links}\n          error={errorMessage}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          data={data}\n          updateLocation={updateLocation}\n          alertState={alertState}\n        />\n        <div className={panelContentClassNames}>\n          <div ref={element => (this.element = element)} className=\"panel-height-helper\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  return {\n    angularComponent: state.dashboard.panels[props.panel.id].angularComponent,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = { setPanelAngularComponent, updateLocation };\n\nexport const PanelChromeAngular = connect(mapStateToProps, mapDispatchToProps)(PanelChromeAngularUnconnected);\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { isEqual } from 'lodash';\nimport { DataLink, LoadingState, PanelData, PanelMenuItem, QueryResultMetaNotice, ScopedVars } from '@grafana/data';\nimport { AngularComponent } from '@grafana/runtime';\nimport { ClickOutsideWrapper, Icon, Tooltip } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport PanelHeaderCorner from './PanelHeaderCorner';\nimport { PanelHeaderMenu } from './PanelHeaderMenu';\nimport templateSrv from 'app/features/templating/template_srv';\n\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { getPanelLinksSupplier } from 'app/features/panel/panellinks/linkSuppliers';\nimport { getPanelMenu } from 'app/features/dashboard/utils/getPanelMenu';\nimport { updateLocation } from 'app/core/actions';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  angularComponent?: AngularComponent | null;\n  links?: DataLink[];\n  error?: string;\n  alertState?: string;\n  isViewing: boolean;\n  isEditing: boolean;\n  data: PanelData;\n  updateLocation: typeof updateLocation;\n}\n\ninterface ClickCoordinates {\n  x: number;\n  y: number;\n}\n\ninterface State {\n  panelMenuOpen: boolean;\n  menuItems: PanelMenuItem[];\n}\n\nexport class PanelHeader extends Component<Props, State> {\n  clickCoordinates: ClickCoordinates = { x: 0, y: 0 };\n\n  state: State = {\n    panelMenuOpen: false,\n    menuItems: [],\n  };\n\n  eventToClickCoordinates = (event: React.MouseEvent<HTMLDivElement>) => {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n    };\n  };\n\n  onMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {\n    this.clickCoordinates = this.eventToClickCoordinates(event);\n  };\n\n  isClick = (clickCoordinates: ClickCoordinates) => {\n    return isEqual(clickCoordinates, this.clickCoordinates);\n  };\n\n  onMenuToggle = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (!this.isClick(this.eventToClickCoordinates(event))) {\n      return;\n    }\n\n    event.stopPropagation();\n\n    const { dashboard, panel, angularComponent } = this.props;\n    const menuItems = getPanelMenu(dashboard, panel, angularComponent);\n\n    this.setState({\n      panelMenuOpen: !this.state.panelMenuOpen,\n      menuItems,\n    });\n  };\n\n  closeMenu = () => {\n    this.setState({\n      panelMenuOpen: false,\n    });\n  };\n\n  private renderLoadingState(): JSX.Element {\n    return (\n      <div className=\"panel-loading\">\n        <Icon className=\"fa-spin\" name=\"fa fa-spinner\" />\n      </div>\n    );\n  }\n\n  openInspect = (e: React.SyntheticEvent, tab: string) => {\n    const { updateLocation, panel } = this.props;\n\n    e.stopPropagation();\n\n    updateLocation({\n      query: { inspect: panel.id, inspectTab: tab },\n      partial: true,\n    });\n  };\n\n  renderNotice = (notice: QueryResultMetaNotice) => {\n    return (\n      <Tooltip content={notice.text} key={notice.severity}>\n        {notice.inspect ? (\n          <div className=\"panel-info-notice pointer\" onClick={e => this.openInspect(e, notice.inspect!)}>\n            <Icon name=\"info-circle\" style={{ marginRight: '8px' }} />\n          </div>\n        ) : (\n          <a className=\"panel-info-notice\" href={notice.link} target=\"_blank\">\n            <Icon name=\"info-circle\" style={{ marginRight: '8px' }} />\n          </a>\n        )}\n      </Tooltip>\n    );\n  };\n\n  render() {\n    const { panel, scopedVars, error, isViewing, isEditing, data, alertState } = this.props;\n    const { menuItems } = this.state;\n    const title = templateSrv.replaceWithText(panel.title, scopedVars);\n\n    const panelHeaderClass = classNames({\n      'panel-header': true,\n      'grid-drag-handle': !(isViewing || isEditing),\n    });\n\n    // dedupe on severity\n    const notices: Record<string, QueryResultMetaNotice> = {};\n\n    for (const series of data.series) {\n      if (series.meta && series.meta.notices) {\n        for (const notice of series.meta.notices) {\n          notices[notice.severity] = notice;\n        }\n      }\n    }\n\n    return (\n      <>\n        {data.state === LoadingState.Loading && this.renderLoadingState()}\n        <div className={panelHeaderClass}>\n          <PanelHeaderCorner\n            panel={panel}\n            title={panel.title}\n            description={panel.description}\n            scopedVars={panel.scopedVars}\n            links={getPanelLinksSupplier(panel)}\n            error={error}\n          />\n          <div\n            className=\"panel-title-container\"\n            onClick={this.onMenuToggle}\n            onMouseDown={this.onMouseDown}\n            aria-label={selectors.components.Panels.Panel.title(title)}\n          >\n            <div className=\"panel-title\">\n              {Object.values(notices).map(this.renderNotice)}\n              {alertState && (\n                <Icon\n                  name={alertState === 'alerting' ? 'heart-break' : 'heart'}\n                  className=\"icon-gf panel-alert-icon\"\n                  style={{ marginRight: '4px' }}\n                  size=\"sm\"\n                />\n              )}\n              <span className=\"panel-title-text\">\n                {title}\n                <Icon name=\"angle-down\" className=\"panel-menu-toggle\" />\n              </span>\n              {this.state.panelMenuOpen && (\n                <ClickOutsideWrapper onClick={this.closeMenu}>\n                  <PanelHeaderMenu items={menuItems} />\n                </ClickOutsideWrapper>\n              )}\n              {data.request && data.request.timeInfo && (\n                <span className=\"panel-time-info\">\n                  <Icon name=\"clock-nine\" size=\"sm\" /> {data.request.timeInfo}\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport { renderMarkdown, LinkModelSupplier, ScopedVars } from '@grafana/data';\nimport { Tooltip, PopoverContent } from '@grafana/ui';\nimport { getLocationSrv } from '@grafana/runtime';\n\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport templateSrv from 'app/features/templating/template_srv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { InspectTab } from '../../components/Inspector/PanelInspector';\n\nenum InfoMode {\n  Error = 'Error',\n  Info = 'Info',\n  Links = 'Links',\n}\n\ninterface Props {\n  panel: PanelModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: LinkModelSupplier<PanelModel>;\n  error?: string;\n}\n\nexport class PanelHeaderCorner extends Component<Props> {\n  timeSrv: TimeSrv = getTimeSrv();\n\n  getInfoMode = () => {\n    const { panel, error } = this.props;\n    if (error) {\n      return InfoMode.Error;\n    }\n    if (!!panel.description) {\n      return InfoMode.Info;\n    }\n    if (panel.links && panel.links.length) {\n      return InfoMode.Links;\n    }\n\n    return undefined;\n  };\n\n  getInfoContent = (): JSX.Element => {\n    const { panel } = this.props;\n    const markdown = panel.description || '';\n    const interpolatedMarkdown = templateSrv.replace(markdown, panel.scopedVars);\n    const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n    const links = this.props.links && this.props.links.getLinks(panel);\n\n    return (\n      <div className=\"panel-info-content markdown-html\">\n        <div dangerouslySetInnerHTML={{ __html: markedInterpolatedMarkdown }} />\n\n        {links && links.length > 0 && (\n          <ul className=\"panel-info-corner-links\">\n            {links.map((link, idx) => {\n              return (\n                <li key={idx}>\n                  <a className=\"panel-info-corner-links__item\" href={link.href} target={link.target}>\n                    {link.title}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Open the Panel Inspector when we click on an error\n   */\n  onClickError = () => {\n    getLocationSrv().update({ partial: true, query: { inspect: this.props.panel.id, tab: InspectTab.Error } });\n  };\n\n  renderCornerType(infoMode: InfoMode, content: PopoverContent, onClick?: () => void) {\n    const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n    return (\n      <Tooltip content={content} placement=\"top-start\" theme={theme}>\n        <div className={`panel-info-corner panel-info-corner--${infoMode.toLowerCase()}`} onClick={onClick}>\n          <i className=\"fa\" />\n          <span className=\"panel-info-corner-inner\" />\n        </div>\n      </Tooltip>\n    );\n  }\n\n  render() {\n    const { error } = this.props;\n    const infoMode: InfoMode | undefined = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error && error) {\n      return this.renderCornerType(infoMode, error, this.onClickError);\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return this.renderCornerType(infoMode, this.getInfoContent);\n    }\n\n    return null;\n  }\n}\n\nexport default PanelHeaderCorner;\n","import React, { PureComponent } from 'react';\nimport { PanelHeaderMenuItem } from './PanelHeaderMenuItem';\nimport { PanelMenuItem } from '@grafana/data';\n\nexport interface Props {\n  items: PanelMenuItem[];\n}\n\nexport class PanelHeaderMenu extends PureComponent<Props> {\n  renderItems = (menu: PanelMenuItem[], isSubMenu = false) => {\n    return (\n      <ul className=\"dropdown-menu dropdown-menu--menu panel-menu\" role={isSubMenu ? '' : 'menu'}>\n        {menu.map((menuItem, idx: number) => {\n          return (\n            <PanelHeaderMenuItem\n              key={`${menuItem.text}${idx}`}\n              type={menuItem.type}\n              text={menuItem.text}\n              iconClassName={menuItem.iconClassName}\n              onClick={menuItem.onClick}\n              shortcut={menuItem.shortcut}\n            >\n              {menuItem.subMenu && this.renderItems(menuItem.subMenu, true)}\n            </PanelHeaderMenuItem>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  render() {\n    return <div className=\"panel-menu-container dropdown open\">{this.renderItems(this.props.items)}</div>;\n  }\n}\n","import React, { FC } from 'react';\nimport { css } from 'emotion';\nimport { PanelMenuItem } from '@grafana/data';\nimport { Icon, IconName, useTheme } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface Props {\n  children: any;\n}\n\nexport const PanelHeaderMenuItem: FC<Props & PanelMenuItem> = props => {\n  const isSubMenu = props.type === 'submenu';\n  const isDivider = props.type === 'divider';\n  const theme = useTheme();\n  const menuIconClassName = css`\n    margin-right: ${theme.spacing.sm};\n    a::after {\n      display: none;\n    }\n  `;\n  const shortcutIconClassName = css`\n    position: absolute;\n    top: 7px;\n    right: ${theme.spacing.xs};\n    color: ${theme.colors.textWeak};\n  `;\n  return isDivider ? (\n    <li className=\"divider\" />\n  ) : (\n    <li className={isSubMenu ? 'dropdown-submenu' : undefined}>\n      <a onClick={props.onClick} href={props.href}>\n        {props.iconClassName && <Icon name={props.iconClassName as IconName} className={menuIconClassName} />}\n        <span className=\"dropdown-item-text\" aria-label={selectors.components.Panels.Panel.headerItems(props.text)}>\n          {props.text}\n          {isSubMenu && <Icon name=\"angle-right\" className={shortcutIconClassName} />}\n        </span>\n        {props.shortcut && (\n          <span className=\"dropdown-menu-item-shortcut\">\n            <Icon name=\"keyboard\" className={menuIconClassName} /> {props.shortcut}\n          </span>\n        )}\n      </a>\n      {props.children}\n    </li>\n  );\n};\n","// Services & Utils\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { DashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { AnnotationsSrv } from 'app/features/annotations/annotations_srv';\nimport { VariableSrv } from 'app/features/templating/variable_srv';\nimport { KeybindingSrv } from 'app/core/services/keybindingSrv';\n// Actions\nimport { notifyApp, updateLocation } from 'app/core/actions';\nimport {\n  clearDashboardQueriesToUpdateOnLoad,\n  dashboardInitCompleted,\n  dashboardInitFailed,\n  dashboardInitFetching,\n  dashboardInitServices,\n  dashboardInitSlow,\n} from './reducers';\n// Types\nimport { DashboardDTO, DashboardRouteInfo, StoreState, ThunkDispatch, ThunkResult } from 'app/types';\nimport { DashboardModel } from './DashboardModel';\nimport { DataQuery, locationUtil } from '@grafana/data';\nimport { getConfig } from '../../../core/config';\nimport { initDashboardTemplating, processVariables, completeDashboardTemplating } from '../../variables/state/actions';\nimport { emitDashboardViewEvent } from './analyticsProcessor';\n\nexport interface InitDashboardArgs {\n  $injector: any;\n  $scope: any;\n  urlUid?: string;\n  urlSlug?: string;\n  urlType?: string;\n  urlFolderId?: string;\n  routeInfo: DashboardRouteInfo;\n  fixUrl: boolean;\n}\n\nasync function redirectToNewUrl(slug: string, dispatch: ThunkDispatch, currentPath: string) {\n  const res = await backendSrv.getDashboardBySlug(slug);\n\n  if (res) {\n    let newUrl = res.meta.url;\n\n    // fix solo route urls\n    if (currentPath.indexOf('dashboard-solo') !== -1) {\n      newUrl = newUrl.replace('/d/', '/d-solo/');\n    }\n\n    const url = locationUtil.stripBaseFromUrl(newUrl);\n    dispatch(updateLocation({ path: url, partial: true, replace: true }));\n  }\n}\n\nasync function fetchDashboard(\n  args: InitDashboardArgs,\n  dispatch: ThunkDispatch,\n  getState: () => StoreState\n): Promise<DashboardDTO | null> {\n  try {\n    switch (args.routeInfo) {\n      case DashboardRouteInfo.Home: {\n        // load home dash\n        const dashDTO: DashboardDTO = await backendSrv.get('/api/dashboards/home');\n\n        // if user specified a custom home dashboard redirect to that\n        if (dashDTO.redirectUri) {\n          const newUrl = locationUtil.stripBaseFromUrl(dashDTO.redirectUri);\n          dispatch(updateLocation({ path: newUrl, replace: true }));\n          return null;\n        }\n\n        // disable some actions on the default home dashboard\n        dashDTO.meta.canSave = false;\n        dashDTO.meta.canShare = false;\n        dashDTO.meta.canStar = false;\n        return dashDTO;\n      }\n      case DashboardRouteInfo.Normal: {\n        // for old db routes we redirect\n        if (args.urlType === 'db') {\n          redirectToNewUrl(args.urlSlug, dispatch, getState().location.path);\n          return null;\n        }\n\n        const loaderSrv: DashboardLoaderSrv = args.$injector.get('dashboardLoaderSrv');\n        const dashDTO: DashboardDTO = await loaderSrv.loadDashboard(args.urlType, args.urlSlug, args.urlUid);\n\n        if (args.fixUrl && dashDTO.meta.url) {\n          // check if the current url is correct (might be old slug)\n          const dashboardUrl = locationUtil.stripBaseFromUrl(dashDTO.meta.url);\n          const currentPath = getState().location.path;\n\n          if (dashboardUrl !== currentPath) {\n            // replace url to not create additional history items and then return so that initDashboard below isn't executed multiple times.\n            dispatch(updateLocation({ path: dashboardUrl, partial: true, replace: true }));\n            return null;\n          }\n        }\n        return dashDTO;\n      }\n      case DashboardRouteInfo.New: {\n        return getNewDashboardModelData(args.urlFolderId);\n      }\n      default:\n        throw { message: 'Unknown route ' + args.routeInfo };\n    }\n  } catch (err) {\n    dispatch(dashboardInitFailed({ message: 'Failed to fetch dashboard', error: err }));\n    console.log(err);\n    return null;\n  }\n}\n\n/**\n * This action (or saga) does everything needed to bootstrap a dashboard & dashboard model.\n * First it handles the process of fetching the dashboard, correcting the url if required (causing redirects/url updates)\n *\n * This is used both for single dashboard & solo panel routes, home & new dashboard routes.\n *\n * Then it handles the initializing of the old angular services that the dashboard components & panels still depend on\n *\n */\nexport function initDashboard(args: InitDashboardArgs): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    // set fetching state\n    dispatch(dashboardInitFetching());\n\n    // Detect slow loading / initializing and set state flag\n    // This is in order to not show loading indication for fast loading dashboards as it creates blinking/flashing\n    setTimeout(() => {\n      if (getState().dashboard.getModel() === null) {\n        dispatch(dashboardInitSlow());\n      }\n    }, 500);\n\n    // fetch dashboard data\n    const dashDTO = await fetchDashboard(args, dispatch, getState);\n\n    // returns null if there was a redirect or error\n    if (!dashDTO) {\n      return;\n    }\n\n    // set initializing state\n    dispatch(dashboardInitServices());\n\n    // create model\n    let dashboard: DashboardModel;\n    try {\n      dashboard = new DashboardModel(dashDTO.dashboard, dashDTO.meta);\n    } catch (err) {\n      dispatch(dashboardInitFailed({ message: 'Failed create dashboard model', error: err }));\n      console.log(err);\n      return;\n    }\n\n    // add missing orgId query param\n    const storeState = getState();\n    if (!storeState.location.query.orgId) {\n      dispatch(updateLocation({ query: { orgId: storeState.user.orgId }, partial: true, replace: true }));\n    }\n\n    // init services\n    const timeSrv: TimeSrv = args.$injector.get('timeSrv');\n    const annotationsSrv: AnnotationsSrv = args.$injector.get('annotationsSrv');\n    const variableSrv: VariableSrv = args.$injector.get('variableSrv');\n    const keybindingSrv: KeybindingSrv = args.$injector.get('keybindingSrv');\n    const unsavedChangesSrv = args.$injector.get('unsavedChangesSrv');\n    const dashboardSrv: DashboardSrv = args.$injector.get('dashboardSrv');\n\n    timeSrv.init(dashboard);\n    annotationsSrv.init(dashboard);\n\n    if (storeState.dashboard.modifiedQueries) {\n      const { panelId, queries } = storeState.dashboard.modifiedQueries;\n      dashboard.meta.fromExplore = !!(panelId && queries);\n    }\n\n    // template values service needs to initialize completely before\n    // the rest of the dashboard can load\n    try {\n      if (!getConfig().featureToggles.newVariables) {\n        await variableSrv.init(dashboard);\n      }\n      if (getConfig().featureToggles.newVariables) {\n        dispatch(initDashboardTemplating(dashboard.templating.list));\n        await dispatch(processVariables());\n        dispatch(completeDashboardTemplating(dashboard));\n      }\n    } catch (err) {\n      dispatch(notifyApp(createErrorNotification('Templating init failed', err)));\n      console.log(err);\n    }\n\n    try {\n      dashboard.processRepeats();\n      dashboard.updateSubmenuVisibility();\n\n      // handle auto fix experimental feature\n      const queryParams = getState().location.query;\n      if (queryParams.autofitpanels) {\n        dashboard.autoFitPanels(window.innerHeight, queryParams.kiosk);\n      }\n\n      // init unsaved changes tracking\n      unsavedChangesSrv.init(dashboard, args.$scope);\n      keybindingSrv.setupDashboardBindings(args.$scope, dashboard);\n    } catch (err) {\n      dispatch(notifyApp(createErrorNotification('Dashboard init failed', err)));\n      console.log(err);\n    }\n\n    if (storeState.dashboard.modifiedQueries) {\n      const { panelId, queries } = storeState.dashboard.modifiedQueries;\n      updateQueriesWhenComingFromExplore(dispatch, dashboard, panelId, queries);\n    }\n\n    // legacy srv state\n    dashboardSrv.setCurrent(dashboard);\n\n    // send open dashboard event\n    if (args.routeInfo !== DashboardRouteInfo.New) {\n      emitDashboardViewEvent(dashboard);\n    }\n\n    // yay we are done\n    dispatch(dashboardInitCompleted(dashboard));\n  };\n}\n\nfunction getNewDashboardModelData(urlFolderId?: string): any {\n  const data = {\n    meta: {\n      canStar: false,\n      canShare: false,\n      isNew: true,\n      folderId: 0,\n    },\n    dashboard: {\n      title: 'New dashboard',\n      panels: [\n        {\n          type: 'add-panel',\n          gridPos: { x: 0, y: 0, w: 12, h: 9 },\n          title: 'Panel Title',\n        },\n      ],\n    },\n  };\n\n  if (urlFolderId) {\n    data.meta.folderId = parseInt(urlFolderId, 10);\n  }\n\n  return data;\n}\n\nfunction updateQueriesWhenComingFromExplore(\n  dispatch: ThunkDispatch,\n  dashboard: DashboardModel,\n  originPanelId: number,\n  queries: DataQuery[]\n) {\n  const panelArrId = dashboard.panels.findIndex(panel => panel.id === originPanelId);\n\n  if (panelArrId > -1) {\n    dashboard.panels[panelArrId].targets = queries;\n  }\n\n  // Clear update state now that we're done\n  dispatch(clearDashboardQueriesToUpdateOnLoad());\n}\n","import { updateLocation } from 'app/core/actions';\nimport { store } from 'app/store/store';\nimport { AngularComponent, getDataSourceSrv, getLocationSrv } from '@grafana/runtime';\nimport { PanelMenuItem } from '@grafana/data';\nimport { copyPanel, duplicatePanel, removePanel, sharePanel } from 'app/features/dashboard/utils/panel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { contextSrv } from '../../../core/services/context_srv';\nimport { navigateToExplore } from '../../explore/state/actions';\nimport { getExploreUrl } from '../../../core/utils/explore';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { PanelCtrl } from '../../panel/panel_ctrl';\n\nexport function getPanelMenu(\n  dashboard: DashboardModel,\n  panel: PanelModel,\n  angularComponent?: AngularComponent | null\n): PanelMenuItem[] {\n  const onViewPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    store.dispatch(\n      updateLocation({\n        query: {\n          viewPanel: panel.id,\n        },\n        partial: true,\n      })\n    );\n  };\n\n  const onEditPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    store.dispatch(\n      updateLocation({\n        query: {\n          editPanel: panel.id,\n        },\n        partial: true,\n      })\n    );\n  };\n\n  const onSharePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    sharePanel(dashboard, panel);\n  };\n\n  const onInspectPanel = (tab?: string) => {\n    event.preventDefault();\n\n    getLocationSrv().update({\n      partial: true,\n      query: {\n        inspect: panel.id,\n        inspectTab: tab,\n      },\n    });\n  };\n\n  const onMore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n  };\n\n  const onDuplicatePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    duplicatePanel(dashboard, panel);\n  };\n\n  const onCopyPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    copyPanel(panel);\n  };\n\n  const onRemovePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    removePanel(dashboard, panel, true);\n  };\n\n  const onNavigateToExplore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    const openInNewWindow = event.ctrlKey || event.metaKey ? (url: string) => window.open(url) : undefined;\n    store.dispatch(navigateToExplore(panel, { getDataSourceSrv, getTimeSrv, getExploreUrl, openInNewWindow }) as any);\n  };\n\n  const menu: PanelMenuItem[] = [];\n\n  if (!panel.isEditing) {\n    menu.push({\n      text: 'View',\n      iconClassName: 'eye',\n      onClick: onViewPanel,\n      shortcut: 'v',\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing) {\n    menu.push({\n      text: 'Edit',\n      iconClassName: 'edit',\n      onClick: onEditPanel,\n      shortcut: 'e',\n    });\n  }\n\n  menu.push({\n    text: 'Share',\n    iconClassName: 'share-alt',\n    onClick: onSharePanel,\n    shortcut: 'p s',\n  });\n\n  if (contextSrv.hasAccessToExplore() && !(panel.plugin && panel.plugin.meta.skipDataQuery)) {\n    menu.push({\n      text: 'Explore',\n      iconClassName: 'compass',\n      shortcut: 'x',\n      onClick: onNavigateToExplore,\n    });\n  }\n\n  const inspectMenu: PanelMenuItem[] = [];\n\n  // Only show these inspect actions for data plugins\n  if (panel.plugin && !panel.plugin.meta.skipDataQuery) {\n    inspectMenu.push({\n      text: 'Data',\n      onClick: (e: React.MouseEvent<any>) => onInspectPanel('data'),\n    });\n\n    if (dashboard.meta.canEdit) {\n      inspectMenu.push({\n        text: 'Query',\n        onClick: (e: React.MouseEvent<any>) => onInspectPanel('query'),\n      });\n    }\n  }\n\n  inspectMenu.push({\n    text: 'Panel JSON',\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel('json'),\n  });\n\n  menu.push({\n    type: 'submenu',\n    text: 'Inspect',\n    iconClassName: 'info-circle',\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel(),\n    shortcut: 'i',\n    subMenu: inspectMenu,\n  });\n\n  const subMenu: PanelMenuItem[] = [];\n\n  if (dashboard.canEditPanel(panel) && !(panel.isViewing || panel.isEditing)) {\n    subMenu.push({\n      text: 'Duplicate',\n      onClick: onDuplicatePanel,\n      shortcut: 'p d',\n    });\n\n    subMenu.push({\n      text: 'Copy',\n      onClick: onCopyPanel,\n    });\n  }\n\n  // add old angular panel options\n  if (angularComponent) {\n    const scope = angularComponent.getScope();\n    const panelCtrl: PanelCtrl = scope.$$childHead.ctrl;\n    const angularMenuItems = panelCtrl.getExtendedMenu();\n\n    for (const item of angularMenuItems) {\n      const reactItem: PanelMenuItem = {\n        text: item.text,\n        href: item.href,\n        shortcut: item.shortcut,\n      };\n\n      if (item.click) {\n        reactItem.onClick = () => {\n          scope.$eval(item.click, { ctrl: panelCtrl });\n        };\n      }\n\n      subMenu.push(reactItem);\n    }\n  }\n\n  if (!panel.isEditing && subMenu.length) {\n    menu.push({\n      type: 'submenu',\n      text: 'More...',\n      iconClassName: 'cube',\n      subMenu,\n      onClick: onMore,\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing) {\n    menu.push({ type: 'divider' });\n\n    menu.push({\n      text: 'Remove',\n      iconClassName: 'trash-alt',\n      onClick: onRemovePanel,\n      shortcut: 'p r',\n    });\n  }\n\n  return menu;\n}\n"],"mappings":"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AAjEA;AAwEA;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AA6BA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AADA;AACA;AAAA;AADA;AACA;AADA;AAmBA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AAtBA;AACA;AADA;AAHA;AAMA;AACA;AAXA;AAAA;AAAA;AAaA;AACA;AAdA;AAAA;AAAA;AAiBA;AACA;AAAA;AAAA;AACA;AACA;AApBA;AAAA;AAAA;AA8BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AAGA;AAvEA;AAAA;AAAA;AAyEA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AAIA;AAjGA;AACA;AADA;AAAA;AACA;AAmGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3JA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAWA;AAEA;AAsBA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AADA;AACA;AAAA;AADA;AACA;AADA;AA4HA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AAhKA;AAkKA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AArKA;AAuKA;AACA;AACA;AAzKA;AA2KA;AACA;AACA;AA7KA;AA+KA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAnLA;AA8LA;AACA;AACA;AAFA;AAIA;AACA;AAhMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAHA;AAaA;AACA;AAlBA;AAAA;AAAA;AAmBA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AANA;AAQA;AACA;AACA;AAIA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AADA;AAGA;AACA;AA5DA;AAAA;AAAA;AA+DA;AACA;AACA;AACA;AACA;AACA;AACA;AArEA;AAAA;AAAA;AAuEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAxFA;AAAA;AAAA;AAyFA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAxBA;AACA;AA0BA;AAAA;AAAA;AAAA;AAAA;AACA;AA9HA;AAAA;AAAA;AAwMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAmBA;AA3PA;AAAA;AAAA;AA6PA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5QA;AAAA;AAAA;AA8QA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAIA;AApTA;AAAA;AAAA;AAwLA;AAEA;AACA;AA3LA;AAAA;AAAA;AA8LA;AACA;AA/LA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAuCA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AACA;AADA;AA6BA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA3CA;AACA;AACA;AACA;AACA;AAHA;AADA;AAFA;AASA;AACA;AAhBA;AAAA;AAAA;AAiBA;AACA;AADA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AA1BA;AAAA;AAAA;AA6BA;AACA;AACA;AACA;AACA;AAjCA;AAAA;AAAA;AAqDA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAjEA;AAAA;AAAA;AAoEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3EA;AAAA;AAAA;AA6EA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5FA;AAAA;AAAA;AA8FA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AArGA;AAAA;AAAA;AAuGA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AA7GA;AAAA;AAAA;AA+GA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAFA;AACA;AAKA;AACA;AAvIA;AAAA;AAAA;AAyIA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAjJA;AAAA;AAAA;AAmJA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlKA;AAAA;AAAA;AAoKA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AA7MA;AACA;AADA;AAAA;AACA;AA+MA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjRA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AA6BA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AAAA;AADA;AAIA;AACA;AAFA;AACA;AAJA;AASA;AACA;A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AA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AA6DA;AA9DA;AAAA;AACA;AADA;AAgEA;AACA;AAjEA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAmEA;AACA;AACA;AArEA;AAuEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAxGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAyGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAHA;AAPA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AAEA;AACA;AADA;AAGA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAlBA;AACA;AAIA;AAAA;AAcA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;;;;A","sourceRoot":""}
{"version":3,"file":"mixedPlugin.4ae03f96e12c61fb15f9.js","sources":["webpack:///////////./public/app/plugins/datasource/mixed/MixedDataSource.ts","webpack:///////////./public/app/plugins/datasource/mixed/module.ts"],"sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport groupBy from 'lodash/groupBy';\nimport { from, of, Observable, forkJoin } from 'rxjs';\nimport { map, mergeMap, mergeAll } from 'rxjs/operators';\n\nimport {\n  LoadingState,\n  DataSourceApi,\n  DataQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n} from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport const MIXED_DATASOURCE_NAME = '-- Mixed --';\n\nexport interface BatchedQueries {\n  datasource: Promise<DataSourceApi>;\n  targets: DataQuery[];\n}\n\nexport class MixedDatasource extends DataSourceApi<DataQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(request: DataQueryRequest<DataQuery>): Observable<DataQueryResponse> {\n    // Remove any invalid queries\n    const queries = request.targets.filter(t => {\n      return t.datasource !== MIXED_DATASOURCE_NAME;\n    });\n\n    if (!queries.length) {\n      return of({ data: [] } as DataQueryResponse); // nothing\n    }\n\n    // Build groups of queries to run in parallel\n    const sets: { [key: string]: DataQuery[] } = groupBy(queries, 'datasource');\n    const mixed: BatchedQueries[] = [];\n    for (const key in sets) {\n      const targets = sets[key];\n      const dsName = targets[0].datasource;\n      mixed.push({\n        datasource: getDataSourceSrv().get(dsName),\n        targets,\n      });\n    }\n    return this.batchQueries(mixed, request);\n  }\n\n  batchQueries(mixed: BatchedQueries[], request: DataQueryRequest<DataQuery>): Observable<DataQueryResponse> {\n    const runningQueries = mixed.filter(this.isQueryable).map((query, i) =>\n      from(query.datasource).pipe(\n        mergeMap((api: DataSourceApi) => {\n          const dsRequest = cloneDeep(request);\n          dsRequest.requestId = `mixed-${i}-${dsRequest.requestId || ''}`;\n          dsRequest.targets = query.targets;\n\n          return from(api.query(dsRequest)).pipe(\n            map(response => {\n              return {\n                ...response,\n                data: response.data || [],\n                state: LoadingState.Loading,\n                key: `mixed-${i}-${response.key || ''}`,\n              } as DataQueryResponse;\n            })\n          );\n        })\n      )\n    );\n\n    return forkJoin(runningQueries).pipe(map(this.markAsDone), mergeAll());\n  }\n\n  testDatasource() {\n    return Promise.resolve({});\n  }\n\n  private isQueryable(query: BatchedQueries): boolean {\n    return query && Array.isArray(query.targets) && query.targets.length > 0;\n  }\n\n  private markAsDone(responses: DataQueryResponse[]): DataQueryResponse[] {\n    const { length } = responses;\n\n    if (length === 0) {\n      return responses;\n    }\n\n    responses[length - 1].state = LoadingState.Done;\n    return responses;\n  }\n}\n","import { MixedDatasource } from './MixedDataSource';\nexport { MixedDatasource, MixedDatasource as Datasource };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAQA;AAEA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAJA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AA3BA;AAAA;AAAA;AA8BA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAJA;AAMA;AAEA;AAjBA;AAqBA;AACA;AApDA;AAAA;AAAA;AAuDA;AACA;AAxDA;AAAA;AAAA;AA2DA;AACA;AA5DA;AAAA;AAAA;AA8DA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAvEA;AACA;AADA;AAAA;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;A","sourceRoot":""}
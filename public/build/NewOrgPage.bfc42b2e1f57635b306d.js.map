{"version":3,"file":"NewOrgPage.bfc42b2e1f57635b306d.js","sources":["webpack:////////////////////////////////////./public/app/features/org/NewOrgPage.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport Page from 'app/core/components/Page/Page';\nimport { Button, Input, Field, Form } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { StoreState } from 'app/types';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { getNavModel } from '../../core/selectors/navModel';\n\nconst createOrg = async (newOrg: { name: string }) => {\n  const result = await getBackendSrv().post('/api/orgs/', newOrg);\n\n  await getBackendSrv().post('/api/user/using/' + result.orgId);\n  window.location.href = getConfig().appSubUrl + '/org';\n};\n\nconst validateOrg = async (orgName: string) => {\n  try {\n    await getBackendSrv().get(`api/orgs/name/${encodeURI(orgName)}`);\n  } catch (error) {\n    if (error.status === 404) {\n      error.isHandled = true;\n      return true;\n    }\n    return 'Something went wrong';\n  }\n  return 'Organization already exists';\n};\n\ninterface PropsWithState {\n  navModel: NavModel;\n}\n\ninterface CreateOrgFormDTO {\n  name: string;\n}\n\nexport const NewOrgPage: FC<PropsWithState> = ({ navModel }) => {\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h3 className=\"page-sub-heading\">New Organization</h3>\n\n        <p className=\"playlist-description\">\n          Each organization contains their own dashboards, data sources and configuration, and cannot be shared between\n          orgs. While users may belong to more than one, multiple organization are most frequently used in multi-tenant\n          deployments.{' '}\n        </p>\n\n        <Form<CreateOrgFormDTO> onSubmit={createOrg}>\n          {({ register, errors }) => {\n            return (\n              <>\n                <Field label=\"Organization name\" invalid={!!errors.name} error={errors.name && errors.name.message}>\n                  <Input\n                    placeholder=\"Org. name\"\n                    name=\"name\"\n                    ref={register({\n                      required: 'Organization name is required',\n                      validate: async orgName => await validateOrg(orgName),\n                    })}\n                  />\n                </Field>\n                <Button type=\"submit\">Create</Button>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps = (state: StoreState) => {\n  return { navModel: getNavModel(state.navIndex, 'global-orgs') };\n};\n\nexport default hot(module)(connect(mapStateToProps)(NewOrgPage));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AALA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAoBA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAFA;AAHA;AASA;AAAA;AAGA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;A","sourceRoot":""}
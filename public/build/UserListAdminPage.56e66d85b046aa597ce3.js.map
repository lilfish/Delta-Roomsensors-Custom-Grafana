{"version":3,"file":"UserListAdminPage.56e66d85b046aa597ce3.js","sources":["webpack:////////./public/app/features/admin/UserListAdminPage.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { css, cx } from 'emotion';\nimport { hot } from 'react-hot-loader';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { Pagination, Tooltip, HorizontalGroup, stylesFactory, LinkButton, Input, Icon } from '@grafana/ui';\nimport { StoreState, UserDTO } from '../../types';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from '../../core/selectors/navModel';\nimport { fetchUsers, changeQuery, changePage } from './state/actions';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  navModel: NavModel;\n  users: UserDTO[];\n  query: string;\n  showPaging: boolean;\n  totalPages: number;\n  page: number;\n}\n\ninterface DispatchProps {\n  fetchUsers: typeof fetchUsers;\n  changeQuery: typeof changeQuery;\n  changePage: typeof changePage;\n}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nconst UserListAdminPageUnConnected: React.FC<Props> = props => {\n  const styles = getStyles();\n\n  useEffect(() => {\n    props.fetchUsers();\n  }, []);\n\n  return (\n    <Page navModel={props.navModel}>\n      <Page.Contents>\n        <>\n          <div>\n            <HorizontalGroup justify=\"space-between\">\n              <Input\n                width={40}\n                type=\"text\"\n                placeholder=\"Search user by login,email or name\"\n                tabIndex={1}\n                autoFocus={true}\n                value={props.query}\n                spellCheck={false}\n                onChange={event => props.changeQuery(event.currentTarget.value)}\n                prefix={<Icon name=\"search\" />}\n              />\n              <LinkButton href=\"admin/users/create\" variant=\"primary\">\n                New user\n              </LinkButton>\n            </HorizontalGroup>\n          </div>\n\n          <div className={cx(styles.table, 'admin-list-table')}>\n            <table className=\"filter-table form-inline filter-table--hover\">\n              <thead>\n                <tr>\n                  <th></th>\n                  <th>Login</th>\n                  <th>Email</th>\n                  <th>Name</th>\n                  <th>\n                    Seen&nbsp;\n                    <Tooltip placement=\"top\" content=\"Time since user was seen using Grafana\">\n                      <Icon name=\"question-circle\" />\n                    </Tooltip>\n                  </th>\n                  <th></th>\n                  <th style={{ width: '1%' }}></th>\n                </tr>\n              </thead>\n              <tbody>{props.users.map(renderUser)}</tbody>\n            </table>\n          </div>\n          {props.showPaging && (\n            <Pagination numberOfPages={props.totalPages} currentPage={props.page} onNavigate={props.changePage} />\n          )}\n        </>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst renderUser = (user: UserDTO) => {\n  const editUrl = `admin/users/edit/${user.id}`;\n\n  return (\n    <tr key={user.id}>\n      <td className=\"width-4 text-center link-td\">\n        <a href={editUrl}>\n          <img className=\"filter-table__avatar\" src={user.avatarUrl} />\n        </a>\n      </td>\n      <td className=\"link-td\">\n        <a href={editUrl}>{user.login}</a>\n      </td>\n      <td className=\"link-td\">\n        <a href={editUrl}>{user.email}</a>\n      </td>\n      <td className=\"link-td\">\n        <a href={editUrl}>{user.name}</a>\n      </td>\n      <td className=\"link-td\">{user.lastSeenAtAge && <a href={editUrl}>{user.lastSeenAtAge}</a>}</td>\n      <td className=\"link-td\">\n        {user.isAdmin && (\n          <a href={editUrl}>\n            <Tooltip placement=\"top\" content=\"Grafana Admin\">\n              <Icon name=\"shield\" />\n            </Tooltip>\n          </a>\n        )}\n      </td>\n      <td className=\"text-right\">\n        {Array.isArray(user.authLabels) && user.authLabels.length > 0 && (\n          <TagBadge label={user.authLabels[0]} removeIcon={false} count={0} />\n        )}\n      </td>\n      <td className=\"text-right\">\n        {user.isDisabled && <span className=\"label label-tag label-tag--gray\">Disabled</span>}\n      </td>\n    </tr>\n  );\n};\n\nconst getStyles = stylesFactory(() => {\n  return {\n    table: css`\n      margin-top: 28px;\n    `,\n  };\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  fetchUsers,\n  changeQuery,\n  changePage,\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = state => ({\n  navModel: getNavModel(state.navIndex, 'global-users'),\n  users: state.userListAdmin.users,\n  query: state.userListAdmin.query,\n  showPaging: state.userListAdmin.showPaging,\n  totalPages: state.userListAdmin.totalPages,\n  page: state.userListAdmin.page,\n});\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(UserListAdminPageUnConnected));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAoBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AATA;AAWA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AASA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AADA;AAKA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AACA;AAQA;;;;;A","sourceRoot":""}
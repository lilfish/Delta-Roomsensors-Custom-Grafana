{"version":3,"file":"PluginListPage.bfc42b2e1f57635b306d.js","sources":["webpack:////////////////////////////////////./public/app/core/components/OrgActionBar/OrgActionBar.tsx","webpack:////////////////////////////////////./public/app/features/plugins/PluginList.tsx","webpack:////////////////////////////////////./public/app/features/plugins/PluginListItem.tsx","webpack:////////////////////////////////////./public/app/features/plugins/PluginListPage.tsx","webpack:////////////////////////////////////./public/app/features/plugins/PluginSignatureBadge.tsx","webpack:////////////////////////////////////./public/app/features/plugins/state/selectors.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { FilterInput } from '../FilterInput/FilterInput';\nimport { LinkButton } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => {};\n  linkButton: { href: string; title: string };\n  target?: string;\n}\n\nexport default class OrgActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target } = this.props;\n    const linkProps = { href: linkButton.href };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            labelClassName=\"gf-form--has-input-icon\"\n            inputClassName=\"gf-form-input width-20\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            placeholder={'Search by name or type'}\n          />\n        </div>\n        <div className=\"page-action-bar__spacer\" />\n        <LinkButton {...linkProps}>{linkButton.title}</LinkButton>\n      </div>\n    );\n  }\n}\n","import React, { FC } from 'react';\nimport PluginListItem from './PluginListItem';\nimport { PluginMeta } from '@grafana/data';\n\ninterface Props {\n  plugins: PluginMeta[];\n}\n\nconst PluginList: FC<Props> = props => {\n  const { plugins } = props;\n\n  return (\n    <section className=\"card-section card-list-layout-list\">\n      <ol className=\"card-list\">\n        {plugins.map((plugin, index) => {\n          return <PluginListItem plugin={plugin} key={`${plugin.name}-${index}`} />;\n        })}\n      </ol>\n    </section>\n  );\n};\n\nexport default PluginList;\n","import React, { FC } from 'react';\nimport { PluginMeta } from '@grafana/data';\nimport { PluginSignatureBadge } from './PluginSignatureBadge';\n\ninterface Props {\n  plugin: PluginMeta;\n}\n\nconst PluginListItem: FC<Props> = props => {\n  const { plugin } = props;\n\n  return (\n    <li className=\"card-item-wrapper\">\n      <a className=\"card-item\" href={`plugins/${plugin.id}/`}>\n        <div className=\"card-item-header\">\n          <div className=\"card-item-type\">{plugin.type}</div>\n          <PluginSignatureBadge status={plugin.signature} />\n          {plugin.hasUpdate && (\n            <div className=\"card-item-notice\">\n              <span bs-tooltip=\"plugin.latestVersion\">Update available!</span>\n            </div>\n          )}\n        </div>\n        <div className=\"card-item-body\">\n          <figure className=\"card-item-figure\">\n            <img src={plugin.info.logos.small} />\n          </figure>\n          <div className=\"card-item-details\">\n            <div className=\"card-item-name\">{plugin.name}</div>\n            <div className=\"card-item-sub-name\">{`By ${plugin.info.author.name}`}</div>\n          </div>\n        </div>\n      </a>\n    </li>\n  );\n};\n\nexport default PluginListItem;\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport OrgActionBar from 'app/core/components/OrgActionBar/OrgActionBar';\nimport PluginList from './PluginList';\nimport { loadPlugins } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getPlugins, getPluginsSearchQuery } from './state/selectors';\nimport { NavModel, PluginMeta } from '@grafana/data';\nimport { StoreState } from 'app/types';\nimport { setPluginsSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  plugins: PluginMeta[];\n  searchQuery: string;\n  hasFetched: boolean;\n  loadPlugins: typeof loadPlugins;\n  setPluginsSearchQuery: typeof setPluginsSearchQuery;\n}\n\nexport class PluginListPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.fetchPlugins();\n  }\n\n  async fetchPlugins() {\n    await this.props.loadPlugins();\n  }\n\n  render() {\n    const { hasFetched, navModel, plugins, setPluginsSearchQuery, searchQuery } = this.props;\n\n    const linkButton = {\n      href: 'https://grafana.com/plugins?utm_source=grafana_plugin_list',\n      title: 'Find more plugins on Grafana.com',\n    };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            <OrgActionBar\n              searchQuery={searchQuery}\n              setSearchQuery={query => setPluginsSearchQuery(query)}\n              linkButton={linkButton}\n            />\n            {hasFetched && plugins && plugins && <PluginList plugins={plugins} />}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'plugins'),\n    plugins: getPlugins(state.plugins),\n    searchQuery: getPluginsSearchQuery(state.plugins),\n    hasFetched: state.plugins.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadPlugins,\n  setPluginsSearchQuery,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(PluginListPage));\n","import React from 'react';\nimport { Badge, BadgeProps } from '@grafana/ui';\nimport { PluginSignatureStatus } from '@grafana/data';\n\ninterface Props {\n  status: PluginSignatureStatus;\n}\n\nexport const PluginSignatureBadge: React.FC<Props> = ({ status }) => {\n  const display = getSignatureDisplayModel(status);\n  return <Badge text={display.text} color={display.color} icon={display.icon} tooltip={display.tooltip} />;\n};\n\nfunction getSignatureDisplayModel(signature: PluginSignatureStatus): BadgeProps {\n  switch (signature) {\n    case PluginSignatureStatus.internal:\n      return { text: 'Core', icon: 'cube', color: 'blue', tooltip: 'Core plugin that is bundled with Grafana' };\n    case PluginSignatureStatus.valid:\n      return { text: 'Signed', icon: 'lock', color: 'green', tooltip: 'Signed and verified plugin' };\n    case PluginSignatureStatus.invalid:\n      return {\n        text: 'Invalid',\n        icon: 'exclamation-triangle',\n        color: 'red',\n        tooltip: 'Invalid plugin signature',\n      };\n    case PluginSignatureStatus.modified:\n      return {\n        text: 'Modified',\n        icon: 'exclamation-triangle',\n        color: 'red',\n        tooltip: 'Valid signature but content has been modified',\n      };\n  }\n\n  return { text: 'Unsigned', icon: 'exclamation-triangle', color: 'red', tooltip: 'Unsigned external plugin' };\n}\n\nPluginSignatureBadge.displayName = 'PluginSignatureBadge';\n","import { PluginsState } from 'app/types/plugins';\n\nexport const getPlugins = (state: PluginsState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.plugins.filter(item => {\n    return regex.test(item.name) || regex.test(item.info.author.name) || regex.test(item.info.description);\n  });\n};\n\nexport const getPluginsSearchQuery = (state: PluginsState) => state.searchQuery;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAQA;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAIA;;;;AAxBA;AACA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAKA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAWA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AAAA;AAKA;AA/BA;AACA;AADA;AAAA;AACA;AAiCA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAJA;AAbA;AACA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;;;A","sourceRoot":""}
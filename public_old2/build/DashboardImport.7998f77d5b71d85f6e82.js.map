{"version":3,"file":"DashboardImport.7998f77d5b71d85f6e82.js","sources":["webpack://////////./public/app/core/components/Select/DataSourcePicker.tsx","webpack://////////./public/app/core/components/connectWithCleanUp.tsx","webpack://////////./public/app/features/manage-dashboards/DashboardImportPage.tsx","webpack://////////./public/app/features/manage-dashboards/components/DashboardFileUpload.tsx","webpack://////////./public/app/features/manage-dashboards/components/ImportDashboardForm.tsx","webpack://////////./public/app/features/manage-dashboards/components/ImportDashboardOverview.tsx","webpack://////////./public/app/features/manage-dashboards/state/actions.ts","webpack://////////./public/app/features/manage-dashboards/utils/validation.ts"],"sourcesContent":["// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport { Select } from '@grafana/ui';\nimport { SelectableValue, DataSourceSelectItem } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nexport interface Props {\n  onChange: (ds: DataSourceSelectItem) => void;\n  datasources: DataSourceSelectItem[];\n  current?: DataSourceSelectItem;\n  hideTextValue?: boolean;\n  onBlur?: () => void;\n  autoFocus?: boolean;\n  openMenuOnFocus?: boolean;\n  showLoading?: boolean;\n  placeholder?: string;\n  invalid?: boolean;\n}\n\nexport class DataSourcePicker extends PureComponent<Props> {\n  static defaultProps: Partial<Props> = {\n    autoFocus: false,\n    openMenuOnFocus: false,\n    placeholder: 'Select datasource',\n  };\n\n  searchInput: HTMLElement;\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  onChange = (item: SelectableValue<string>) => {\n    const ds = this.props.datasources.find(ds => ds.name === item.value);\n\n    if (ds) {\n      this.props.onChange(ds);\n    }\n  };\n\n  render() {\n    const {\n      datasources,\n      current,\n      autoFocus,\n      hideTextValue,\n      onBlur,\n      openMenuOnFocus,\n      showLoading,\n      placeholder,\n      invalid,\n    } = this.props;\n\n    const options = datasources.map(ds => ({\n      value: ds.name,\n      label: ds.name,\n      imgUrl: ds.meta.info.logos.small,\n    }));\n\n    const value = current && {\n      label: current.name.substr(0, 37),\n      value: current.name,\n      imgUrl: current.meta.info.logos.small,\n      loading: showLoading,\n      hideText: hideTextValue,\n    };\n\n    return (\n      <div aria-label={selectors.components.DataSourcePicker.container}>\n        <Select\n          className=\"ds-picker select-container\"\n          isMulti={false}\n          isClearable={false}\n          backspaceRemovesValue={false}\n          onChange={this.onChange}\n          options={options}\n          autoFocus={autoFocus}\n          onBlur={onBlur}\n          openMenuOnFocus={openMenuOnFocus}\n          maxMenuHeight={500}\n          menuPlacement=\"bottom\"\n          placeholder={placeholder}\n          noOptionsMessage=\"No datasources found\"\n          value={value}\n          invalid={invalid}\n        />\n      </div>\n    );\n  }\n}\n\nexport default DataSourcePicker;\n","import { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nexport const connectWithCleanUp = <\n  TStateProps extends {} = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  State = {},\n  TSelector extends object = {},\n  Statics = {}\n>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  stateSelector: StateSelector<TSelector>\n) => (Component: ComponentType<any>) => {\n  const ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n    // @ts-ignore\n  )(Component);\n\n  const ConnectedComponentWithCleanUp: FunctionComponent = props => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n      return function cleanUp() {\n        dispatch(cleanUpAction({ stateSelector }));\n      };\n    }, []);\n    // @ts-ignore\n    return <ConnectedComponent {...props} />;\n  };\n\n  ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n  hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n  type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n  return ConnectedComponentWithCleanUp as Hoisted;\n};\n","import React, { FormEvent, PureComponent } from 'react';\nimport { MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { css } from 'emotion';\nimport { AppEvents, NavModel } from '@grafana/data';\nimport { Button, stylesFactory, Input, TextArea, Field, Form, Legend } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { connectWithCleanUp } from 'app/core/components/connectWithCleanUp';\nimport { ImportDashboardOverview } from './components/ImportDashboardOverview';\nimport { DashboardFileUpload } from './components/DashboardFileUpload';\nimport { validateDashboardJson, validateGcomDashboard } from './utils/validation';\nimport { fetchGcomDashboard, importDashboardJson } from './state/actions';\nimport appEvents from 'app/core/app_events';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  navModel: NavModel;\n  isLoaded: boolean;\n}\n\ninterface DispatchProps {\n  fetchGcomDashboard: typeof fetchGcomDashboard;\n  importDashboardJson: typeof importDashboardJson;\n}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nclass DashboardImportUnConnected extends PureComponent<Props> {\n  onFileUpload = (event: FormEvent<HTMLInputElement>) => {\n    const { importDashboardJson } = this.props;\n    const file = event.currentTarget.files && event.currentTarget.files.length > 0 && event.currentTarget.files[0];\n\n    if (file) {\n      const reader = new FileReader();\n      const readerOnLoad = () => {\n        return (e: any) => {\n          let dashboard: any;\n          try {\n            dashboard = JSON.parse(e.target.result);\n          } catch (error) {\n            appEvents.emit(AppEvents.alertError, [\n              'Import failed',\n              'JSON -> JS Serialization failed: ' + error.message,\n            ]);\n            return;\n          }\n          importDashboardJson(dashboard);\n        };\n      };\n      reader.onload = readerOnLoad();\n      reader.readAsText(file);\n    }\n  };\n\n  getDashboardFromJson = (formData: { dashboardJson: string }) => {\n    this.props.importDashboardJson(JSON.parse(formData.dashboardJson));\n  };\n\n  getGcomDashboard = (formData: { gcomDashboard: string }) => {\n    let dashboardId;\n    const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(formData.gcomDashboard);\n    if (match && match[1]) {\n      dashboardId = match[1];\n    } else if (match && match[2]) {\n      dashboardId = match[2];\n    }\n\n    if (dashboardId) {\n      this.props.fetchGcomDashboard(dashboardId);\n    }\n  };\n\n  renderImportForm() {\n    const styles = importStyles();\n\n    return (\n      <>\n        <div className={styles.option}>\n          <DashboardFileUpload onFileUpload={this.onFileUpload} />\n        </div>\n        <div className={styles.option}>\n          <Legend>Import via grafana.com</Legend>\n          <Form onSubmit={this.getGcomDashboard} defaultValues={{ gcomDashboard: '' }}>\n            {({ register, errors }) => (\n              <Field invalid={!!errors.gcomDashboard} error={errors.gcomDashboard && errors.gcomDashboard.message}>\n                <Input\n                  name=\"gcomDashboard\"\n                  placeholder=\"Grafana.com dashboard url or id\"\n                  type=\"text\"\n                  ref={register({\n                    required: 'A Grafana dashboard url or id is required',\n                    validate: validateGcomDashboard,\n                  })}\n                  addonAfter={<Button type=\"submit\">Load</Button>}\n                />\n              </Field>\n            )}\n          </Form>\n        </div>\n        <div className={styles.option}>\n          <Legend>Import via panel json</Legend>\n          <Form onSubmit={this.getDashboardFromJson} defaultValues={{ dashboardJson: '' }}>\n            {({ register, errors }) => (\n              <>\n                <Field invalid={!!errors.dashboardJson} error={errors.dashboardJson && errors.dashboardJson.message}>\n                  <TextArea\n                    name=\"dashboardJson\"\n                    ref={register({\n                      required: 'Need a dashboard json model',\n                      validate: validateDashboardJson,\n                    })}\n                    rows={10}\n                  />\n                </Field>\n                <Button type=\"submit\">Load</Button>\n              </>\n            )}\n          </Form>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { isLoaded, navModel } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>{isLoaded ? <ImportDashboardOverview /> : this.renderImportForm()}</Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'import', undefined, true),\n  isLoaded: state.importDashboard.isLoaded,\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, Props> = {\n  fetchGcomDashboard,\n  importDashboardJson,\n};\n\nexport const DashboardImportPage = connectWithCleanUp(\n  mapStateToProps,\n  mapDispatchToProps,\n  state => state.importDashboard\n)(DashboardImportUnConnected);\nexport default DashboardImportPage;\nDashboardImportPage.displayName = 'DashboardImport';\n\nconst importStyles = stylesFactory(() => {\n  return {\n    option: css`\n      margin-bottom: 32px;\n    `,\n  };\n});\n","import React, { FC, FormEvent } from 'react';\nimport { getFormStyles, stylesFactory, useTheme } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\nimport { css } from 'emotion';\n\ninterface Props {\n  onFileUpload: (event: FormEvent<HTMLInputElement>) => void;\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  const buttonFormStyle = getFormStyles(theme, { variant: 'primary', invalid: false, size: 'md' }).button.button;\n  return {\n    fileUpload: css`\n      display: none;\n    `,\n    button: css`\n      ${buttonFormStyle}\n    `,\n  };\n});\n\nexport const DashboardFileUpload: FC<Props> = ({ onFileUpload }) => {\n  const theme = useTheme();\n  const style = getStyles(theme);\n\n  return (\n    <label className={style.button}>\n      Upload .json file\n      <input\n        type=\"file\"\n        id=\"fileUpload\"\n        className={style.fileUpload}\n        onChange={onFileUpload}\n        multiple={false}\n        accept=\"application/json\"\n      />\n    </label>\n  );\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport {\n  Button,\n  FormAPI,\n  FormsOnSubmit,\n  HorizontalGroup,\n  FormFieldErrors,\n  Input,\n  Field,\n  InputControl,\n  Legend,\n} from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport DataSourcePicker from 'app/core/components/Select/DataSourcePicker';\nimport { DashboardInput, DashboardInputs, DataSourceInput, ImportDashboardDTO } from '../state/reducers';\nimport { validateTitle, validateUid } from '../utils/validation';\n\ninterface Props extends Omit<FormAPI<ImportDashboardDTO>, 'formState'> {\n  uidReset: boolean;\n  inputs: DashboardInputs;\n  initialFolderId: number;\n\n  onCancel: () => void;\n  onUidReset: () => void;\n  onSubmit: FormsOnSubmit<ImportDashboardDTO>;\n}\n\nexport const ImportDashboardForm: FC<Props> = ({\n  register,\n  errors,\n  control,\n  getValues,\n  uidReset,\n  inputs,\n  initialFolderId,\n  onUidReset,\n  onCancel,\n  onSubmit,\n}) => {\n  const [isSubmitted, setSubmitted] = useState(false);\n\n  /*\n    This useEffect is needed for overwriting a dashboard. It\n    submits the form even if there's validation errors on title or uid.\n  */\n  useEffect(() => {\n    if (isSubmitted && (errors.title || errors.uid)) {\n      onSubmit(getValues({ nest: true }), {} as any);\n    }\n  }, [errors]);\n\n  return (\n    <>\n      <Legend>Options</Legend>\n      <Field label=\"Name\" invalid={!!errors.title} error={errors.title && errors.title.message}>\n        <Input\n          name=\"title\"\n          type=\"text\"\n          ref={register({\n            required: 'Name is required',\n            validate: async (v: string) => await validateTitle(v, getValues().folder.id),\n          })}\n        />\n      </Field>\n      <Field label=\"Folder\">\n        <InputControl\n          as={FolderPicker}\n          name=\"folder\"\n          useNewForms\n          enableCreateNew\n          initialFolderId={initialFolderId}\n          control={control}\n        />\n      </Field>\n      <Field\n        label=\"Unique identifier (uid)\"\n        description=\"The unique identifier (uid) of a dashboard can be used for uniquely identify a dashboard between multiple Grafana installs.\n                The uid allows having consistent URL’s for accessing dashboards so changing the title of a dashboard will not break any\n                bookmarked links to that dashboard.\"\n        invalid={!!errors.uid}\n        error={errors.uid && errors.uid.message}\n      >\n        <>\n          {!uidReset ? (\n            <Input\n              name=\"uid\"\n              disabled\n              ref={register({ validate: async (v: string) => await validateUid(v) })}\n              addonAfter={!uidReset && <Button onClick={onUidReset}>Change uid</Button>}\n            />\n          ) : (\n            <Input name=\"uid\" ref={register({ required: true, validate: async (v: string) => await validateUid(v) })} />\n          )}\n        </>\n      </Field>\n      {inputs.dataSources &&\n        inputs.dataSources.map((input: DataSourceInput, index: number) => {\n          const dataSourceOption = `dataSources[${index}]`;\n          return (\n            <Field\n              label={input.label}\n              key={dataSourceOption}\n              invalid={errors.dataSources && !!errors.dataSources[index]}\n              error={errors.dataSources && errors.dataSources[index] && 'A data source is required'}\n            >\n              <InputControl\n                as={DataSourcePicker}\n                name={`${dataSourceOption}`}\n                datasources={input.options}\n                control={control}\n                placeholder={input.info}\n                rules={{ required: true }}\n              />\n            </Field>\n          );\n        })}\n      {inputs.constants &&\n        inputs.constants.map((input: DashboardInput, index) => {\n          const constantIndex = `constants[${index}]`;\n          return (\n            <Field\n              label={input.label}\n              error={errors.constants && errors.constants[index] && `${input.label} needs a value`}\n              invalid={errors.constants && !!errors.constants[index]}\n              key={constantIndex}\n            >\n              <Input ref={register({ required: true })} name={`${constantIndex}`} defaultValue={input.value} />\n            </Field>\n          );\n        })}\n      <HorizontalGroup>\n        <Button\n          type=\"submit\"\n          variant={getButtonVariant(errors)}\n          onClick={() => {\n            setSubmitted(true);\n          }}\n        >\n          {getButtonText(errors)}\n        </Button>\n        <Button type=\"reset\" variant=\"secondary\" onClick={onCancel}>\n          Cancel\n        </Button>\n      </HorizontalGroup>\n    </>\n  );\n};\n\nfunction getButtonVariant(errors: FormFieldErrors<ImportDashboardDTO>) {\n  return errors && (errors.title || errors.uid) ? 'destructive' : 'primary';\n}\n\nfunction getButtonText(errors: FormFieldErrors<ImportDashboardDTO>) {\n  return errors && (errors.title || errors.uid) ? 'Import (Overwrite)' : 'Import';\n}\n","import React, { PureComponent } from 'react';\nimport { dateTimeFormat } from '@grafana/data';\nimport { Legend, Form } from '@grafana/ui';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { ImportDashboardForm } from './ImportDashboardForm';\nimport { clearLoadedDashboard, saveDashboard } from '../state/actions';\nimport { DashboardInputs, DashboardSource, ImportDashboardDTO } from '../state/reducers';\nimport { StoreState } from 'app/types';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  dashboard: ImportDashboardDTO;\n  inputs: DashboardInputs;\n  source: DashboardSource;\n  meta?: any;\n  folder: { id: number; title?: string };\n}\n\ninterface DispatchProps {\n  clearLoadedDashboard: typeof clearLoadedDashboard;\n  saveDashboard: typeof saveDashboard;\n}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\ninterface State {\n  uidReset: boolean;\n}\n\nclass ImportDashboardOverviewUnConnected extends PureComponent<Props, State> {\n  state: State = {\n    uidReset: false,\n  };\n\n  onSubmit = (form: ImportDashboardDTO) => {\n    this.props.saveDashboard(form);\n  };\n\n  onCancel = () => {\n    this.props.clearLoadedDashboard();\n  };\n\n  onUidReset = () => {\n    this.setState({ uidReset: true });\n  };\n\n  render() {\n    const { dashboard, inputs, meta, source, folder } = this.props;\n    const { uidReset } = this.state;\n\n    return (\n      <>\n        {source === DashboardSource.Gcom && (\n          <div style={{ marginBottom: '24px' }}>\n            <div>\n              <Legend>\n                Importing Dashboard from{' '}\n                <a\n                  href={`https://grafana.com/dashboards/${dashboard.gnetId}`}\n                  className=\"external-link\"\n                  target=\"_blank\"\n                >\n                  Grafana.com\n                </a>\n              </Legend>\n            </div>\n            <table className=\"filter-table form-inline\">\n              <tbody>\n                <tr>\n                  <td>Published by</td>\n                  <td>{meta.orgName}</td>\n                </tr>\n                <tr>\n                  <td>Updated on</td>\n                  <td>{dateTimeFormat(meta.updatedAt)}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        )}\n        <Form\n          onSubmit={this.onSubmit}\n          defaultValues={{ ...dashboard, constants: [], dataSources: [], folder: folder }}\n          validateOnMount\n          validateFieldsOnMount={['title', 'uid']}\n          validateOn=\"onChange\"\n        >\n          {({ register, errors, control, getValues }) => (\n            <ImportDashboardForm\n              register={register}\n              errors={errors}\n              control={control}\n              getValues={getValues}\n              uidReset={uidReset}\n              inputs={inputs}\n              onCancel={this.onCancel}\n              onUidReset={this.onUidReset}\n              onSubmit={this.onSubmit}\n              initialFolderId={folder.id}\n            />\n          )}\n        </Form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state: StoreState) => ({\n  dashboard: state.importDashboard.dashboard,\n  meta: state.importDashboard.meta,\n  source: state.importDashboard.source,\n  inputs: state.importDashboard.inputs,\n  folder: state.location.routeParams.folderId ? { id: Number(state.location.routeParams.folderId) } : { id: 0 },\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  clearLoadedDashboard,\n  saveDashboard,\n};\n\nexport const ImportDashboardOverview = connect(mapStateToProps, mapDispatchToProps)(ImportDashboardOverviewUnConnected);\nImportDashboardOverview.displayName = 'ImportDashboardOverview';\n","import { AppEvents, DataSourceInstanceSettings, DataSourceSelectItem, locationUtil } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport config from 'app/core/config';\nimport {\n  clearDashboard,\n  setInputs,\n  setGcomDashboard,\n  setJsonDashboard,\n  InputType,\n  ImportDashboardDTO,\n} from './reducers';\nimport { updateLocation } from 'app/core/actions';\nimport { ThunkResult } from 'app/types';\nimport { appEvents } from '../../../core/core';\n\nexport function fetchGcomDashboard(id: string): ThunkResult<void> {\n  return async dispatch => {\n    try {\n      const dashboard = await getBackendSrv().get(`/api/gnet/dashboards/${id}`);\n      dispatch(setGcomDashboard(dashboard));\n      dispatch(processInputs(dashboard.json));\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, [error.data.message || error]);\n    }\n  };\n}\n\nexport function importDashboardJson(dashboard: any): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(setJsonDashboard(dashboard));\n    dispatch(processInputs(dashboard));\n  };\n}\n\nfunction processInputs(dashboardJson: any): ThunkResult<void> {\n  return dispatch => {\n    if (dashboardJson && dashboardJson.__inputs) {\n      const inputs: any[] = [];\n      dashboardJson.__inputs.forEach((input: any) => {\n        const inputModel: any = {\n          name: input.name,\n          label: input.label,\n          info: input.description,\n          value: input.value,\n          type: input.type,\n          pluginId: input.pluginId,\n          options: [],\n        };\n\n        if (input.type === InputType.DataSource) {\n          getDataSourceOptions(input, inputModel);\n        } else if (!inputModel.info) {\n          inputModel.info = 'Specify a string constant';\n        }\n\n        inputs.push(inputModel);\n      });\n      dispatch(setInputs(inputs));\n    }\n  };\n}\n\nexport function clearLoadedDashboard(): ThunkResult<void> {\n  return dispatch => {\n    dispatch(clearDashboard());\n  };\n}\n\nexport function saveDashboard(importDashboardForm: ImportDashboardDTO): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const dashboard = getState().importDashboard.dashboard;\n    const inputs = getState().importDashboard.inputs;\n\n    let inputsToPersist = [] as any[];\n    importDashboardForm.dataSources?.forEach((dataSource: DataSourceSelectItem, index: number) => {\n      const input = inputs.dataSources[index];\n      inputsToPersist.push({\n        name: input.name,\n        type: input.type,\n        pluginId: input.pluginId,\n        value: dataSource.value,\n      });\n    });\n\n    importDashboardForm.constants?.forEach((constant: any, index: number) => {\n      const input = inputs.constants[index];\n\n      inputsToPersist.push({\n        value: constant,\n        name: input.name,\n        type: input.type,\n      });\n    });\n\n    const result = await getBackendSrv().post('api/dashboards/import', {\n      dashboard: { ...dashboard, title: importDashboardForm.title, uid: importDashboardForm.uid },\n      overwrite: true,\n      inputs: inputsToPersist,\n      folderId: importDashboardForm.folder.id,\n    });\n    const dashboardUrl = locationUtil.stripBaseFromUrl(result.importedUrl);\n    dispatch(updateLocation({ path: dashboardUrl }));\n  };\n}\n\nconst getDataSourceOptions = (input: { pluginId: string; pluginName: string }, inputModel: any) => {\n  const sources = Object.values(config.datasources).filter(\n    (val: DataSourceInstanceSettings) => val.type === input.pluginId\n  );\n\n  if (sources.length === 0) {\n    inputModel.info = 'No data sources of type ' + input.pluginName + ' found';\n  } else if (!inputModel.info) {\n    inputModel.info = 'Select a ' + input.pluginName + ' data source';\n  }\n\n  inputModel.options = sources.map(val => {\n    return { name: val.name, value: val.name, meta: val.meta };\n  });\n};\n","import validationSrv from '../services/ValidationSrv';\nimport { getBackendSrv } from '@grafana/runtime';\n\nexport const validateDashboardJson = (json: string) => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (error) {\n    return 'Not valid JSON';\n  }\n};\n\nexport const validateGcomDashboard = (gcomDashboard: string) => {\n  // From DashboardImportCtrl\n  const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(gcomDashboard);\n\n  return match && (match[1] || match[2]) ? true : 'Could not find a valid Grafana.com id';\n};\n\nexport const validateTitle = (newTitle: string, folderId: number) => {\n  return validationSrv\n    .validateNewDashboardName(folderId, newTitle)\n    .then(() => {\n      return true;\n    })\n    .catch(error => {\n      if (error.type === 'EXISTING') {\n        return error.message;\n      }\n    });\n};\n\nexport const validateUid = (value: string) => {\n  return getBackendSrv()\n    .get(`/api/dashboards/uid/${value}`)\n    .then(existingDashboard => {\n      return `Dashboard named '${existingDashboard?.dashboard.title}' in folder '${existingDashboard?.meta.folderTitle}' has the same uid`;\n    })\n    .catch(error => {\n      error.isHandled = true;\n      return true;\n    });\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AAeA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAEA;AACA;AAZA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAmBA;AArEA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAuEA;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAYA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAlCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;;;;;;;;;;;;;;;;;;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AARA;AAFA;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AA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAvBA;AAAA;AA0BA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AACA;AA1BA;AAyBA;AAMA;AACA;AAAA;AAAA;AACA;AAjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAkCA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACvHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;;;;A","sourceRoot":""}